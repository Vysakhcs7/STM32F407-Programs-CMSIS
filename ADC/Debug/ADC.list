
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012cc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800147c  0800147c  0001147c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014b4  080014b4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080014b4  080014b4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014b4  080014b4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014b4  080014b4  000114b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014b8  080014b8  000114b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080014bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000d92  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000047c  00000000  00000000  00020e61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000138  00000000  00000000  000212e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000d8  00000000  00000000  00021418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00019c8b  00000000  00000000  000214f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000015da  00000000  00000000  0003b17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008d444  00000000  00000000  0003c755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000b98  00000000  00000000  000c9b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  000ca734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001464 	.word	0x08001464

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08001464 	.word	0x08001464

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate);
static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t periph_clk,uint32_t baudrate);
void uart2_write(int ch);
//void delay(void);
int __io_putchar(int ch)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	f000 f8c5 	bl	8000428 <uart2_write>
	return ch;
 800029e:	687b      	ldr	r3, [r7, #4]
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <main>:



int main(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
	uart_tx_init();
 80002ae:	f000 f83d 	bl	800032c <uart_tx_init>

	//Enable clock access to GPIOF
	//Bit 5 GPIOFEN: IO port F clock enable
	RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOFEN);
 80002b2:	4b1a      	ldr	r3, [pc, #104]	; (800031c <main+0x74>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a19      	ldr	r2, [pc, #100]	; (800031c <main+0x74>)
 80002b8:	f043 0320 	orr.w	r3, r3, #32
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30


	//Set the mode of PF6 to analog
	//PF6 - ADC3_IN4
	//Analog Mode
	GPIOF->MODER |= (GPIO_MODER_MODE6);
 80002be:	4b18      	ldr	r3, [pc, #96]	; (8000320 <main+0x78>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a17      	ldr	r2, [pc, #92]	; (8000320 <main+0x78>)
 80002c4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80002c8:	6013      	str	r3, [r2, #0]

	//Configure the ADC module
	//Enable clock access to ADC
	//ADC1EN: ADC3 clock enable
	RCC->APB2ENR |= (RCC_APB2ENR_ADC3EN);
 80002ca:	4b14      	ldr	r3, [pc, #80]	; (800031c <main+0x74>)
 80002cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ce:	4a13      	ldr	r2, [pc, #76]	; (800031c <main+0x74>)
 80002d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d4:	6453      	str	r3, [r2, #68]	; 0x44


	//Conversion sequence start
	ADC3->SQR3 = (ADC_SQR3_SQ1_0);
 80002d6:	4b13      	ldr	r3, [pc, #76]	; (8000324 <main+0x7c>)
 80002d8:	2201      	movs	r2, #1
 80002da:	635a      	str	r2, [r3, #52]	; 0x34

	//conversion sequence length
	ADC3->SQR1 |= 0x00;
 80002dc:	4b11      	ldr	r3, [pc, #68]	; (8000324 <main+0x7c>)
 80002de:	4a11      	ldr	r2, [pc, #68]	; (8000324 <main+0x7c>)
 80002e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002e2:	62d3      	str	r3, [r2, #44]	; 0x2c

	//Enable ADC module
	//ADC control register 2 (ADC_CR2)
	//ADON: A/D Converter ON / OFF
	//ADC ON
	ADC3->CR2 |= (ADC_CR2_ADON);
 80002e4:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <main+0x7c>)
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <main+0x7c>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6093      	str	r3, [r2, #8]

	while(1)
	{
		//Start conversion of regular channels
		//This bit is set by software to start conversion and cleared by hardware as soon as the conversion starts.
		ADC3->CR2 |= (ADC_CR2_SWSTART);
 80002f0:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <main+0x7c>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4a0b      	ldr	r2, [pc, #44]	; (8000324 <main+0x7c>)
 80002f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80002fa:	6093      	str	r3, [r2, #8]

		//Checking if the conversion is complete
		while(!(ADC3->SR & ADC_SR_EOC)){};
 80002fc:	bf00      	nop
 80002fe:	4b09      	ldr	r3, [pc, #36]	; (8000324 <main+0x7c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0302 	and.w	r3, r3, #2
 8000306:	2b00      	cmp	r3, #0
 8000308:	d0f9      	beq.n	80002fe <main+0x56>



		//Assigning the ADC value to the variable and printing it
		int adc_val = (ADC3->DR);
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <main+0x7c>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030e:	607b      	str	r3, [r7, #4]
		printf("%d\n\r",adc_val);
 8000310:	6879      	ldr	r1, [r7, #4]
 8000312:	4805      	ldr	r0, [pc, #20]	; (8000328 <main+0x80>)
 8000314:	f000 fa30 	bl	8000778 <iprintf>
	{
 8000318:	e7ea      	b.n	80002f0 <main+0x48>
 800031a:	bf00      	nop
 800031c:	40023800 	.word	0x40023800
 8000320:	40021400 	.word	0x40021400
 8000324:	40012200 	.word	0x40012200
 8000328:	0800147c 	.word	0x0800147c

0800032c <uart_tx_init>:
return 0;
}


void uart_tx_init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	//configure uart gpio pin

	 //Enable clock access to GPIOD
	RCC->AHB1ENR |= GPIODEN;
 8000330:	4b26      	ldr	r3, [pc, #152]	; (80003cc <uart_tx_init+0xa0>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4a25      	ldr	r2, [pc, #148]	; (80003cc <uart_tx_init+0xa0>)
 8000336:	f043 0308 	orr.w	r3, r3, #8
 800033a:	6313      	str	r3, [r2, #48]	; 0x30
	 //set pd5 and pd6 to alternate fn mode
	 GPIOD->MODER |= (1 << 11);
 800033c:	4b24      	ldr	r3, [pc, #144]	; (80003d0 <uart_tx_init+0xa4>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a23      	ldr	r2, [pc, #140]	; (80003d0 <uart_tx_init+0xa4>)
 8000342:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000346:	6013      	str	r3, [r2, #0]
	 GPIOD->MODER &= ~(1 << 10);
 8000348:	4b21      	ldr	r3, [pc, #132]	; (80003d0 <uart_tx_init+0xa4>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a20      	ldr	r2, [pc, #128]	; (80003d0 <uart_tx_init+0xa4>)
 800034e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000352:	6013      	str	r3, [r2, #0]

	 GPIOD->MODER |= (1 << 13);
 8000354:	4b1e      	ldr	r3, [pc, #120]	; (80003d0 <uart_tx_init+0xa4>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a1d      	ldr	r2, [pc, #116]	; (80003d0 <uart_tx_init+0xa4>)
 800035a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800035e:	6013      	str	r3, [r2, #0]
	 GPIOD->MODER &= ~(1 << 12);
 8000360:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <uart_tx_init+0xa4>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a1a      	ldr	r2, [pc, #104]	; (80003d0 <uart_tx_init+0xa4>)
 8000366:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800036a:	6013      	str	r3, [r2, #0]
	 //set pd5 to alt fn type to uart tx
	GPIOD->AFR[0] &= ~(1 << 23);
 800036c:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <uart_tx_init+0xa4>)
 800036e:	6a1b      	ldr	r3, [r3, #32]
 8000370:	4a17      	ldr	r2, [pc, #92]	; (80003d0 <uart_tx_init+0xa4>)
 8000372:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000376:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |= (1 << 22) | (1 <<21) | (1 << 20);
 8000378:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <uart_tx_init+0xa4>)
 800037a:	6a1b      	ldr	r3, [r3, #32]
 800037c:	4a14      	ldr	r2, [pc, #80]	; (80003d0 <uart_tx_init+0xa4>)
 800037e:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8000382:	6213      	str	r3, [r2, #32]

	GPIOD->AFR[0] &= ~(1 << 27);
 8000384:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <uart_tx_init+0xa4>)
 8000386:	6a1b      	ldr	r3, [r3, #32]
 8000388:	4a11      	ldr	r2, [pc, #68]	; (80003d0 <uart_tx_init+0xa4>)
 800038a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800038e:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |= (1 << 26) | (1 <<25) | (1 << 24);
 8000390:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <uart_tx_init+0xa4>)
 8000392:	6a1b      	ldr	r3, [r3, #32]
 8000394:	4a0e      	ldr	r2, [pc, #56]	; (80003d0 <uart_tx_init+0xa4>)
 8000396:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800039a:	6213      	str	r3, [r2, #32]


	//enable clock access to uart2
	 RCC->APB1ENR |= USART2EN; //Clock enabled
 800039c:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <uart_tx_init+0xa0>)
 800039e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003a0:	4a0a      	ldr	r2, [pc, #40]	; (80003cc <uart_tx_init+0xa0>)
 80003a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003a6:	6413      	str	r3, [r2, #64]	; 0x40

	 //configure baudrate
	 uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 80003a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003ac:	4909      	ldr	r1, [pc, #36]	; (80003d4 <uart_tx_init+0xa8>)
 80003ae:	480a      	ldr	r0, [pc, #40]	; (80003d8 <uart_tx_init+0xac>)
 80003b0:	f000 f814 	bl	80003dc <uart_set_baudrate>
	 //configrue transfer direction
	 USART2->CR1 =(1 << 3);
 80003b4:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <uart_tx_init+0xac>)
 80003b6:	2208      	movs	r2, #8
 80003b8:	60da      	str	r2, [r3, #12]
	 //enable uart module
	 USART2->CR1 |= (1 << 13);
 80003ba:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <uart_tx_init+0xac>)
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	4a06      	ldr	r2, [pc, #24]	; (80003d8 <uart_tx_init+0xac>)
 80003c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003c4:	60d3      	str	r3, [r2, #12]


}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40023800 	.word	0x40023800
 80003d0:	40020c00 	.word	0x40020c00
 80003d4:	00f42400 	.word	0x00f42400
 80003d8:	40004400 	.word	0x40004400

080003dc <uart_set_baudrate>:


static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t periph_clk,uint32_t baudrate)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	60f8      	str	r0, [r7, #12]
 80003e4:	60b9      	str	r1, [r7, #8]
 80003e6:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(periph_clk,baudrate);
 80003e8:	6879      	ldr	r1, [r7, #4]
 80003ea:	68b8      	ldr	r0, [r7, #8]
 80003ec:	f000 f808 	bl	8000400 <compute_uart_bd>
 80003f0:	4603      	mov	r3, r0
 80003f2:	461a      	mov	r2, r3
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	609a      	str	r2, [r3, #8]
}
 80003f8:	bf00      	nop
 80003fa:	3710      	adds	r7, #16
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	6039      	str	r1, [r7, #0]
	return ( (periph_clk + (baudrate/2U))/baudrate);
 800040a:	683b      	ldr	r3, [r7, #0]
 800040c:	085a      	lsrs	r2, r3, #1
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	441a      	add	r2, r3
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	fbb2 f3f3 	udiv	r3, r2, r3
 8000418:	b29b      	uxth	r3, r3
}
 800041a:	4618      	mov	r0, r3
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
	...

08000428 <uart2_write>:

void uart2_write(int ch)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	//Make sure the transmit data register is empty

	while (!(USART2->SR  & (1 << 7))){}
 8000430:	bf00      	nop
 8000432:	4b08      	ldr	r3, [pc, #32]	; (8000454 <uart2_write+0x2c>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800043a:	2b00      	cmp	r3, #0
 800043c:	d0f9      	beq.n	8000432 <uart2_write+0xa>
	//Write to transmit data reigster

	USART2->DR = (ch & 0xFF);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a04      	ldr	r2, [pc, #16]	; (8000454 <uart2_write+0x2c>)
 8000442:	b2db      	uxtb	r3, r3
 8000444:	6053      	str	r3, [r2, #4]
}
 8000446:	bf00      	nop
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	40004400 	.word	0x40004400

08000458 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	60b9      	str	r1, [r7, #8]
 8000462:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]
 8000468:	e00a      	b.n	8000480 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800046a:	f3af 8000 	nop.w
 800046e:	4601      	mov	r1, r0
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	1c5a      	adds	r2, r3, #1
 8000474:	60ba      	str	r2, [r7, #8]
 8000476:	b2ca      	uxtb	r2, r1
 8000478:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	3301      	adds	r3, #1
 800047e:	617b      	str	r3, [r7, #20]
 8000480:	697a      	ldr	r2, [r7, #20]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	429a      	cmp	r2, r3
 8000486:	dbf0      	blt.n	800046a <_read+0x12>
  }

  return len;
 8000488:	687b      	ldr	r3, [r7, #4]
}
 800048a:	4618      	mov	r0, r3
 800048c:	3718      	adds	r7, #24
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}

08000492 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000492:	b580      	push	{r7, lr}
 8000494:	b086      	sub	sp, #24
 8000496:	af00      	add	r7, sp, #0
 8000498:	60f8      	str	r0, [r7, #12]
 800049a:	60b9      	str	r1, [r7, #8]
 800049c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800049e:	2300      	movs	r3, #0
 80004a0:	617b      	str	r3, [r7, #20]
 80004a2:	e009      	b.n	80004b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	1c5a      	adds	r2, r3, #1
 80004a8:	60ba      	str	r2, [r7, #8]
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff feef 	bl	8000290 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	3301      	adds	r3, #1
 80004b6:	617b      	str	r3, [r7, #20]
 80004b8:	697a      	ldr	r2, [r7, #20]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	429a      	cmp	r2, r3
 80004be:	dbf1      	blt.n	80004a4 <_write+0x12>
  }
  return len;
 80004c0:	687b      	ldr	r3, [r7, #4]
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3718      	adds	r7, #24
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}

080004ca <_close>:

int _close(int file)
{
 80004ca:	b480      	push	{r7}
 80004cc:	b083      	sub	sp, #12
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b083      	sub	sp, #12
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
 80004ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004f2:	605a      	str	r2, [r3, #4]
  return 0;
 80004f4:	2300      	movs	r3, #0
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <_isatty>:

int _isatty(int file)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800050a:	2301      	movs	r3, #1
}
 800050c:	4618      	mov	r0, r3
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
	...

08000534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800053c:	4a14      	ldr	r2, [pc, #80]	; (8000590 <_sbrk+0x5c>)
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <_sbrk+0x60>)
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000548:	4b13      	ldr	r3, [pc, #76]	; (8000598 <_sbrk+0x64>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d102      	bne.n	8000556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <_sbrk+0x64>)
 8000552:	4a12      	ldr	r2, [pc, #72]	; (800059c <_sbrk+0x68>)
 8000554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <_sbrk+0x64>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4413      	add	r3, r2
 800055e:	693a      	ldr	r2, [r7, #16]
 8000560:	429a      	cmp	r2, r3
 8000562:	d207      	bcs.n	8000574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000564:	f000 f9ac 	bl	80008c0 <__errno>
 8000568:	4603      	mov	r3, r0
 800056a:	220c      	movs	r2, #12
 800056c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800056e:	f04f 33ff 	mov.w	r3, #4294967295
 8000572:	e009      	b.n	8000588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <_sbrk+0x64>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <_sbrk+0x64>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4413      	add	r3, r2
 8000582:	4a05      	ldr	r2, [pc, #20]	; (8000598 <_sbrk+0x64>)
 8000584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000586:	68fb      	ldr	r3, [r7, #12]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3718      	adds	r7, #24
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20020000 	.word	0x20020000
 8000594:	00000400 	.word	0x00000400
 8000598:	20000078 	.word	0x20000078
 800059c:	200001c8 	.word	0x200001c8

080005a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005a0:	480d      	ldr	r0, [pc, #52]	; (80005d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a8:	480c      	ldr	r0, [pc, #48]	; (80005dc <LoopForever+0x6>)
  ldr r1, =_edata
 80005aa:	490d      	ldr	r1, [pc, #52]	; (80005e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005ac:	4a0d      	ldr	r2, [pc, #52]	; (80005e4 <LoopForever+0xe>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b0:	e002      	b.n	80005b8 <LoopCopyDataInit>

080005b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b6:	3304      	adds	r3, #4

080005b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005bc:	d3f9      	bcc.n	80005b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005be:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c0:	4c0a      	ldr	r4, [pc, #40]	; (80005ec <LoopForever+0x16>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c4:	e001      	b.n	80005ca <LoopFillZerobss>

080005c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c8:	3204      	adds	r2, #4

080005ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005cc:	d3fb      	bcc.n	80005c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ce:	f000 f97d 	bl	80008cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d2:	f7ff fe69 	bl	80002a8 <main>

080005d6 <LoopForever>:

LoopForever:
  b LoopForever
 80005d6:	e7fe      	b.n	80005d6 <LoopForever>
  ldr   r0, =_estack
 80005d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005e4:	080014bc 	.word	0x080014bc
  ldr r2, =_sbss
 80005e8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005ec:	200001c8 	.word	0x200001c8

080005f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f0:	e7fe      	b.n	80005f0 <ADC_IRQHandler>
	...

080005f4 <std>:
 80005f4:	2300      	movs	r3, #0
 80005f6:	b510      	push	{r4, lr}
 80005f8:	4604      	mov	r4, r0
 80005fa:	e9c0 3300 	strd	r3, r3, [r0]
 80005fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000602:	6083      	str	r3, [r0, #8]
 8000604:	8181      	strh	r1, [r0, #12]
 8000606:	6643      	str	r3, [r0, #100]	; 0x64
 8000608:	81c2      	strh	r2, [r0, #14]
 800060a:	6183      	str	r3, [r0, #24]
 800060c:	4619      	mov	r1, r3
 800060e:	2208      	movs	r2, #8
 8000610:	305c      	adds	r0, #92	; 0x5c
 8000612:	f000 f906 	bl	8000822 <memset>
 8000616:	4b0d      	ldr	r3, [pc, #52]	; (800064c <std+0x58>)
 8000618:	6263      	str	r3, [r4, #36]	; 0x24
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <std+0x5c>)
 800061c:	62a3      	str	r3, [r4, #40]	; 0x28
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <std+0x60>)
 8000620:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <std+0x64>)
 8000624:	6323      	str	r3, [r4, #48]	; 0x30
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <std+0x68>)
 8000628:	6224      	str	r4, [r4, #32]
 800062a:	429c      	cmp	r4, r3
 800062c:	d006      	beq.n	800063c <std+0x48>
 800062e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000632:	4294      	cmp	r4, r2
 8000634:	d002      	beq.n	800063c <std+0x48>
 8000636:	33d0      	adds	r3, #208	; 0xd0
 8000638:	429c      	cmp	r4, r3
 800063a:	d105      	bne.n	8000648 <std+0x54>
 800063c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000644:	f000 b966 	b.w	8000914 <__retarget_lock_init_recursive>
 8000648:	bd10      	pop	{r4, pc}
 800064a:	bf00      	nop
 800064c:	0800079d 	.word	0x0800079d
 8000650:	080007bf 	.word	0x080007bf
 8000654:	080007f7 	.word	0x080007f7
 8000658:	0800081b 	.word	0x0800081b
 800065c:	2000007c 	.word	0x2000007c

08000660 <stdio_exit_handler>:
 8000660:	4a02      	ldr	r2, [pc, #8]	; (800066c <stdio_exit_handler+0xc>)
 8000662:	4903      	ldr	r1, [pc, #12]	; (8000670 <stdio_exit_handler+0x10>)
 8000664:	4803      	ldr	r0, [pc, #12]	; (8000674 <stdio_exit_handler+0x14>)
 8000666:	f000 b869 	b.w	800073c <_fwalk_sglue>
 800066a:	bf00      	nop
 800066c:	20000000 	.word	0x20000000
 8000670:	080011c1 	.word	0x080011c1
 8000674:	2000000c 	.word	0x2000000c

08000678 <cleanup_stdio>:
 8000678:	6841      	ldr	r1, [r0, #4]
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <cleanup_stdio+0x34>)
 800067c:	4299      	cmp	r1, r3
 800067e:	b510      	push	{r4, lr}
 8000680:	4604      	mov	r4, r0
 8000682:	d001      	beq.n	8000688 <cleanup_stdio+0x10>
 8000684:	f000 fd9c 	bl	80011c0 <_fflush_r>
 8000688:	68a1      	ldr	r1, [r4, #8]
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <cleanup_stdio+0x38>)
 800068c:	4299      	cmp	r1, r3
 800068e:	d002      	beq.n	8000696 <cleanup_stdio+0x1e>
 8000690:	4620      	mov	r0, r4
 8000692:	f000 fd95 	bl	80011c0 <_fflush_r>
 8000696:	68e1      	ldr	r1, [r4, #12]
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <cleanup_stdio+0x3c>)
 800069a:	4299      	cmp	r1, r3
 800069c:	d004      	beq.n	80006a8 <cleanup_stdio+0x30>
 800069e:	4620      	mov	r0, r4
 80006a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006a4:	f000 bd8c 	b.w	80011c0 <_fflush_r>
 80006a8:	bd10      	pop	{r4, pc}
 80006aa:	bf00      	nop
 80006ac:	2000007c 	.word	0x2000007c
 80006b0:	200000e4 	.word	0x200000e4
 80006b4:	2000014c 	.word	0x2000014c

080006b8 <global_stdio_init.part.0>:
 80006b8:	b510      	push	{r4, lr}
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <global_stdio_init.part.0+0x30>)
 80006bc:	4c0b      	ldr	r4, [pc, #44]	; (80006ec <global_stdio_init.part.0+0x34>)
 80006be:	4a0c      	ldr	r2, [pc, #48]	; (80006f0 <global_stdio_init.part.0+0x38>)
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	4620      	mov	r0, r4
 80006c4:	2200      	movs	r2, #0
 80006c6:	2104      	movs	r1, #4
 80006c8:	f7ff ff94 	bl	80005f4 <std>
 80006cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80006d0:	2201      	movs	r2, #1
 80006d2:	2109      	movs	r1, #9
 80006d4:	f7ff ff8e 	bl	80005f4 <std>
 80006d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006dc:	2202      	movs	r2, #2
 80006de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006e2:	2112      	movs	r1, #18
 80006e4:	f7ff bf86 	b.w	80005f4 <std>
 80006e8:	200001b4 	.word	0x200001b4
 80006ec:	2000007c 	.word	0x2000007c
 80006f0:	08000661 	.word	0x08000661

080006f4 <__sfp_lock_acquire>:
 80006f4:	4801      	ldr	r0, [pc, #4]	; (80006fc <__sfp_lock_acquire+0x8>)
 80006f6:	f000 b90e 	b.w	8000916 <__retarget_lock_acquire_recursive>
 80006fa:	bf00      	nop
 80006fc:	200001bd 	.word	0x200001bd

08000700 <__sfp_lock_release>:
 8000700:	4801      	ldr	r0, [pc, #4]	; (8000708 <__sfp_lock_release+0x8>)
 8000702:	f000 b909 	b.w	8000918 <__retarget_lock_release_recursive>
 8000706:	bf00      	nop
 8000708:	200001bd 	.word	0x200001bd

0800070c <__sinit>:
 800070c:	b510      	push	{r4, lr}
 800070e:	4604      	mov	r4, r0
 8000710:	f7ff fff0 	bl	80006f4 <__sfp_lock_acquire>
 8000714:	6a23      	ldr	r3, [r4, #32]
 8000716:	b11b      	cbz	r3, 8000720 <__sinit+0x14>
 8000718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800071c:	f7ff bff0 	b.w	8000700 <__sfp_lock_release>
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <__sinit+0x28>)
 8000722:	6223      	str	r3, [r4, #32]
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <__sinit+0x2c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d1f5      	bne.n	8000718 <__sinit+0xc>
 800072c:	f7ff ffc4 	bl	80006b8 <global_stdio_init.part.0>
 8000730:	e7f2      	b.n	8000718 <__sinit+0xc>
 8000732:	bf00      	nop
 8000734:	08000679 	.word	0x08000679
 8000738:	200001b4 	.word	0x200001b4

0800073c <_fwalk_sglue>:
 800073c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000740:	4607      	mov	r7, r0
 8000742:	4688      	mov	r8, r1
 8000744:	4614      	mov	r4, r2
 8000746:	2600      	movs	r6, #0
 8000748:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800074c:	f1b9 0901 	subs.w	r9, r9, #1
 8000750:	d505      	bpl.n	800075e <_fwalk_sglue+0x22>
 8000752:	6824      	ldr	r4, [r4, #0]
 8000754:	2c00      	cmp	r4, #0
 8000756:	d1f7      	bne.n	8000748 <_fwalk_sglue+0xc>
 8000758:	4630      	mov	r0, r6
 800075a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800075e:	89ab      	ldrh	r3, [r5, #12]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d907      	bls.n	8000774 <_fwalk_sglue+0x38>
 8000764:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000768:	3301      	adds	r3, #1
 800076a:	d003      	beq.n	8000774 <_fwalk_sglue+0x38>
 800076c:	4629      	mov	r1, r5
 800076e:	4638      	mov	r0, r7
 8000770:	47c0      	blx	r8
 8000772:	4306      	orrs	r6, r0
 8000774:	3568      	adds	r5, #104	; 0x68
 8000776:	e7e9      	b.n	800074c <_fwalk_sglue+0x10>

08000778 <iprintf>:
 8000778:	b40f      	push	{r0, r1, r2, r3}
 800077a:	b507      	push	{r0, r1, r2, lr}
 800077c:	4906      	ldr	r1, [pc, #24]	; (8000798 <iprintf+0x20>)
 800077e:	ab04      	add	r3, sp, #16
 8000780:	6808      	ldr	r0, [r1, #0]
 8000782:	f853 2b04 	ldr.w	r2, [r3], #4
 8000786:	6881      	ldr	r1, [r0, #8]
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	f000 f9e9 	bl	8000b60 <_vfiprintf_r>
 800078e:	b003      	add	sp, #12
 8000790:	f85d eb04 	ldr.w	lr, [sp], #4
 8000794:	b004      	add	sp, #16
 8000796:	4770      	bx	lr
 8000798:	20000058 	.word	0x20000058

0800079c <__sread>:
 800079c:	b510      	push	{r4, lr}
 800079e:	460c      	mov	r4, r1
 80007a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007a4:	f000 f868 	bl	8000878 <_read_r>
 80007a8:	2800      	cmp	r0, #0
 80007aa:	bfab      	itete	ge
 80007ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80007ae:	89a3      	ldrhlt	r3, [r4, #12]
 80007b0:	181b      	addge	r3, r3, r0
 80007b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80007b6:	bfac      	ite	ge
 80007b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80007ba:	81a3      	strhlt	r3, [r4, #12]
 80007bc:	bd10      	pop	{r4, pc}

080007be <__swrite>:
 80007be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007c2:	461f      	mov	r7, r3
 80007c4:	898b      	ldrh	r3, [r1, #12]
 80007c6:	05db      	lsls	r3, r3, #23
 80007c8:	4605      	mov	r5, r0
 80007ca:	460c      	mov	r4, r1
 80007cc:	4616      	mov	r6, r2
 80007ce:	d505      	bpl.n	80007dc <__swrite+0x1e>
 80007d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007d4:	2302      	movs	r3, #2
 80007d6:	2200      	movs	r2, #0
 80007d8:	f000 f83c 	bl	8000854 <_lseek_r>
 80007dc:	89a3      	ldrh	r3, [r4, #12]
 80007de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80007e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007e6:	81a3      	strh	r3, [r4, #12]
 80007e8:	4632      	mov	r2, r6
 80007ea:	463b      	mov	r3, r7
 80007ec:	4628      	mov	r0, r5
 80007ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80007f2:	f000 b853 	b.w	800089c <_write_r>

080007f6 <__sseek>:
 80007f6:	b510      	push	{r4, lr}
 80007f8:	460c      	mov	r4, r1
 80007fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007fe:	f000 f829 	bl	8000854 <_lseek_r>
 8000802:	1c43      	adds	r3, r0, #1
 8000804:	89a3      	ldrh	r3, [r4, #12]
 8000806:	bf15      	itete	ne
 8000808:	6560      	strne	r0, [r4, #84]	; 0x54
 800080a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800080e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000812:	81a3      	strheq	r3, [r4, #12]
 8000814:	bf18      	it	ne
 8000816:	81a3      	strhne	r3, [r4, #12]
 8000818:	bd10      	pop	{r4, pc}

0800081a <__sclose>:
 800081a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800081e:	f000 b809 	b.w	8000834 <_close_r>

08000822 <memset>:
 8000822:	4402      	add	r2, r0
 8000824:	4603      	mov	r3, r0
 8000826:	4293      	cmp	r3, r2
 8000828:	d100      	bne.n	800082c <memset+0xa>
 800082a:	4770      	bx	lr
 800082c:	f803 1b01 	strb.w	r1, [r3], #1
 8000830:	e7f9      	b.n	8000826 <memset+0x4>
	...

08000834 <_close_r>:
 8000834:	b538      	push	{r3, r4, r5, lr}
 8000836:	4d06      	ldr	r5, [pc, #24]	; (8000850 <_close_r+0x1c>)
 8000838:	2300      	movs	r3, #0
 800083a:	4604      	mov	r4, r0
 800083c:	4608      	mov	r0, r1
 800083e:	602b      	str	r3, [r5, #0]
 8000840:	f7ff fe43 	bl	80004ca <_close>
 8000844:	1c43      	adds	r3, r0, #1
 8000846:	d102      	bne.n	800084e <_close_r+0x1a>
 8000848:	682b      	ldr	r3, [r5, #0]
 800084a:	b103      	cbz	r3, 800084e <_close_r+0x1a>
 800084c:	6023      	str	r3, [r4, #0]
 800084e:	bd38      	pop	{r3, r4, r5, pc}
 8000850:	200001b8 	.word	0x200001b8

08000854 <_lseek_r>:
 8000854:	b538      	push	{r3, r4, r5, lr}
 8000856:	4d07      	ldr	r5, [pc, #28]	; (8000874 <_lseek_r+0x20>)
 8000858:	4604      	mov	r4, r0
 800085a:	4608      	mov	r0, r1
 800085c:	4611      	mov	r1, r2
 800085e:	2200      	movs	r2, #0
 8000860:	602a      	str	r2, [r5, #0]
 8000862:	461a      	mov	r2, r3
 8000864:	f7ff fe58 	bl	8000518 <_lseek>
 8000868:	1c43      	adds	r3, r0, #1
 800086a:	d102      	bne.n	8000872 <_lseek_r+0x1e>
 800086c:	682b      	ldr	r3, [r5, #0]
 800086e:	b103      	cbz	r3, 8000872 <_lseek_r+0x1e>
 8000870:	6023      	str	r3, [r4, #0]
 8000872:	bd38      	pop	{r3, r4, r5, pc}
 8000874:	200001b8 	.word	0x200001b8

08000878 <_read_r>:
 8000878:	b538      	push	{r3, r4, r5, lr}
 800087a:	4d07      	ldr	r5, [pc, #28]	; (8000898 <_read_r+0x20>)
 800087c:	4604      	mov	r4, r0
 800087e:	4608      	mov	r0, r1
 8000880:	4611      	mov	r1, r2
 8000882:	2200      	movs	r2, #0
 8000884:	602a      	str	r2, [r5, #0]
 8000886:	461a      	mov	r2, r3
 8000888:	f7ff fde6 	bl	8000458 <_read>
 800088c:	1c43      	adds	r3, r0, #1
 800088e:	d102      	bne.n	8000896 <_read_r+0x1e>
 8000890:	682b      	ldr	r3, [r5, #0]
 8000892:	b103      	cbz	r3, 8000896 <_read_r+0x1e>
 8000894:	6023      	str	r3, [r4, #0]
 8000896:	bd38      	pop	{r3, r4, r5, pc}
 8000898:	200001b8 	.word	0x200001b8

0800089c <_write_r>:
 800089c:	b538      	push	{r3, r4, r5, lr}
 800089e:	4d07      	ldr	r5, [pc, #28]	; (80008bc <_write_r+0x20>)
 80008a0:	4604      	mov	r4, r0
 80008a2:	4608      	mov	r0, r1
 80008a4:	4611      	mov	r1, r2
 80008a6:	2200      	movs	r2, #0
 80008a8:	602a      	str	r2, [r5, #0]
 80008aa:	461a      	mov	r2, r3
 80008ac:	f7ff fdf1 	bl	8000492 <_write>
 80008b0:	1c43      	adds	r3, r0, #1
 80008b2:	d102      	bne.n	80008ba <_write_r+0x1e>
 80008b4:	682b      	ldr	r3, [r5, #0]
 80008b6:	b103      	cbz	r3, 80008ba <_write_r+0x1e>
 80008b8:	6023      	str	r3, [r4, #0]
 80008ba:	bd38      	pop	{r3, r4, r5, pc}
 80008bc:	200001b8 	.word	0x200001b8

080008c0 <__errno>:
 80008c0:	4b01      	ldr	r3, [pc, #4]	; (80008c8 <__errno+0x8>)
 80008c2:	6818      	ldr	r0, [r3, #0]
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	20000058 	.word	0x20000058

080008cc <__libc_init_array>:
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	4d0d      	ldr	r5, [pc, #52]	; (8000904 <__libc_init_array+0x38>)
 80008d0:	4c0d      	ldr	r4, [pc, #52]	; (8000908 <__libc_init_array+0x3c>)
 80008d2:	1b64      	subs	r4, r4, r5
 80008d4:	10a4      	asrs	r4, r4, #2
 80008d6:	2600      	movs	r6, #0
 80008d8:	42a6      	cmp	r6, r4
 80008da:	d109      	bne.n	80008f0 <__libc_init_array+0x24>
 80008dc:	4d0b      	ldr	r5, [pc, #44]	; (800090c <__libc_init_array+0x40>)
 80008de:	4c0c      	ldr	r4, [pc, #48]	; (8000910 <__libc_init_array+0x44>)
 80008e0:	f000 fdc0 	bl	8001464 <_init>
 80008e4:	1b64      	subs	r4, r4, r5
 80008e6:	10a4      	asrs	r4, r4, #2
 80008e8:	2600      	movs	r6, #0
 80008ea:	42a6      	cmp	r6, r4
 80008ec:	d105      	bne.n	80008fa <__libc_init_array+0x2e>
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80008f4:	4798      	blx	r3
 80008f6:	3601      	adds	r6, #1
 80008f8:	e7ee      	b.n	80008d8 <__libc_init_array+0xc>
 80008fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80008fe:	4798      	blx	r3
 8000900:	3601      	adds	r6, #1
 8000902:	e7f2      	b.n	80008ea <__libc_init_array+0x1e>
 8000904:	080014b4 	.word	0x080014b4
 8000908:	080014b4 	.word	0x080014b4
 800090c:	080014b4 	.word	0x080014b4
 8000910:	080014b8 	.word	0x080014b8

08000914 <__retarget_lock_init_recursive>:
 8000914:	4770      	bx	lr

08000916 <__retarget_lock_acquire_recursive>:
 8000916:	4770      	bx	lr

08000918 <__retarget_lock_release_recursive>:
 8000918:	4770      	bx	lr
	...

0800091c <_free_r>:
 800091c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800091e:	2900      	cmp	r1, #0
 8000920:	d044      	beq.n	80009ac <_free_r+0x90>
 8000922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000926:	9001      	str	r0, [sp, #4]
 8000928:	2b00      	cmp	r3, #0
 800092a:	f1a1 0404 	sub.w	r4, r1, #4
 800092e:	bfb8      	it	lt
 8000930:	18e4      	addlt	r4, r4, r3
 8000932:	f000 f8df 	bl	8000af4 <__malloc_lock>
 8000936:	4a1e      	ldr	r2, [pc, #120]	; (80009b0 <_free_r+0x94>)
 8000938:	9801      	ldr	r0, [sp, #4]
 800093a:	6813      	ldr	r3, [r2, #0]
 800093c:	b933      	cbnz	r3, 800094c <_free_r+0x30>
 800093e:	6063      	str	r3, [r4, #4]
 8000940:	6014      	str	r4, [r2, #0]
 8000942:	b003      	add	sp, #12
 8000944:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000948:	f000 b8da 	b.w	8000b00 <__malloc_unlock>
 800094c:	42a3      	cmp	r3, r4
 800094e:	d908      	bls.n	8000962 <_free_r+0x46>
 8000950:	6825      	ldr	r5, [r4, #0]
 8000952:	1961      	adds	r1, r4, r5
 8000954:	428b      	cmp	r3, r1
 8000956:	bf01      	itttt	eq
 8000958:	6819      	ldreq	r1, [r3, #0]
 800095a:	685b      	ldreq	r3, [r3, #4]
 800095c:	1949      	addeq	r1, r1, r5
 800095e:	6021      	streq	r1, [r4, #0]
 8000960:	e7ed      	b.n	800093e <_free_r+0x22>
 8000962:	461a      	mov	r2, r3
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	b10b      	cbz	r3, 800096c <_free_r+0x50>
 8000968:	42a3      	cmp	r3, r4
 800096a:	d9fa      	bls.n	8000962 <_free_r+0x46>
 800096c:	6811      	ldr	r1, [r2, #0]
 800096e:	1855      	adds	r5, r2, r1
 8000970:	42a5      	cmp	r5, r4
 8000972:	d10b      	bne.n	800098c <_free_r+0x70>
 8000974:	6824      	ldr	r4, [r4, #0]
 8000976:	4421      	add	r1, r4
 8000978:	1854      	adds	r4, r2, r1
 800097a:	42a3      	cmp	r3, r4
 800097c:	6011      	str	r1, [r2, #0]
 800097e:	d1e0      	bne.n	8000942 <_free_r+0x26>
 8000980:	681c      	ldr	r4, [r3, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	6053      	str	r3, [r2, #4]
 8000986:	440c      	add	r4, r1
 8000988:	6014      	str	r4, [r2, #0]
 800098a:	e7da      	b.n	8000942 <_free_r+0x26>
 800098c:	d902      	bls.n	8000994 <_free_r+0x78>
 800098e:	230c      	movs	r3, #12
 8000990:	6003      	str	r3, [r0, #0]
 8000992:	e7d6      	b.n	8000942 <_free_r+0x26>
 8000994:	6825      	ldr	r5, [r4, #0]
 8000996:	1961      	adds	r1, r4, r5
 8000998:	428b      	cmp	r3, r1
 800099a:	bf04      	itt	eq
 800099c:	6819      	ldreq	r1, [r3, #0]
 800099e:	685b      	ldreq	r3, [r3, #4]
 80009a0:	6063      	str	r3, [r4, #4]
 80009a2:	bf04      	itt	eq
 80009a4:	1949      	addeq	r1, r1, r5
 80009a6:	6021      	streq	r1, [r4, #0]
 80009a8:	6054      	str	r4, [r2, #4]
 80009aa:	e7ca      	b.n	8000942 <_free_r+0x26>
 80009ac:	b003      	add	sp, #12
 80009ae:	bd30      	pop	{r4, r5, pc}
 80009b0:	200001c0 	.word	0x200001c0

080009b4 <sbrk_aligned>:
 80009b4:	b570      	push	{r4, r5, r6, lr}
 80009b6:	4e0e      	ldr	r6, [pc, #56]	; (80009f0 <sbrk_aligned+0x3c>)
 80009b8:	460c      	mov	r4, r1
 80009ba:	6831      	ldr	r1, [r6, #0]
 80009bc:	4605      	mov	r5, r0
 80009be:	b911      	cbnz	r1, 80009c6 <sbrk_aligned+0x12>
 80009c0:	f000 fcbc 	bl	800133c <_sbrk_r>
 80009c4:	6030      	str	r0, [r6, #0]
 80009c6:	4621      	mov	r1, r4
 80009c8:	4628      	mov	r0, r5
 80009ca:	f000 fcb7 	bl	800133c <_sbrk_r>
 80009ce:	1c43      	adds	r3, r0, #1
 80009d0:	d00a      	beq.n	80009e8 <sbrk_aligned+0x34>
 80009d2:	1cc4      	adds	r4, r0, #3
 80009d4:	f024 0403 	bic.w	r4, r4, #3
 80009d8:	42a0      	cmp	r0, r4
 80009da:	d007      	beq.n	80009ec <sbrk_aligned+0x38>
 80009dc:	1a21      	subs	r1, r4, r0
 80009de:	4628      	mov	r0, r5
 80009e0:	f000 fcac 	bl	800133c <_sbrk_r>
 80009e4:	3001      	adds	r0, #1
 80009e6:	d101      	bne.n	80009ec <sbrk_aligned+0x38>
 80009e8:	f04f 34ff 	mov.w	r4, #4294967295
 80009ec:	4620      	mov	r0, r4
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	200001c4 	.word	0x200001c4

080009f4 <_malloc_r>:
 80009f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009f8:	1ccd      	adds	r5, r1, #3
 80009fa:	f025 0503 	bic.w	r5, r5, #3
 80009fe:	3508      	adds	r5, #8
 8000a00:	2d0c      	cmp	r5, #12
 8000a02:	bf38      	it	cc
 8000a04:	250c      	movcc	r5, #12
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	4607      	mov	r7, r0
 8000a0a:	db01      	blt.n	8000a10 <_malloc_r+0x1c>
 8000a0c:	42a9      	cmp	r1, r5
 8000a0e:	d905      	bls.n	8000a1c <_malloc_r+0x28>
 8000a10:	230c      	movs	r3, #12
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	2600      	movs	r6, #0
 8000a16:	4630      	mov	r0, r6
 8000a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000af0 <_malloc_r+0xfc>
 8000a20:	f000 f868 	bl	8000af4 <__malloc_lock>
 8000a24:	f8d8 3000 	ldr.w	r3, [r8]
 8000a28:	461c      	mov	r4, r3
 8000a2a:	bb5c      	cbnz	r4, 8000a84 <_malloc_r+0x90>
 8000a2c:	4629      	mov	r1, r5
 8000a2e:	4638      	mov	r0, r7
 8000a30:	f7ff ffc0 	bl	80009b4 <sbrk_aligned>
 8000a34:	1c43      	adds	r3, r0, #1
 8000a36:	4604      	mov	r4, r0
 8000a38:	d155      	bne.n	8000ae6 <_malloc_r+0xf2>
 8000a3a:	f8d8 4000 	ldr.w	r4, [r8]
 8000a3e:	4626      	mov	r6, r4
 8000a40:	2e00      	cmp	r6, #0
 8000a42:	d145      	bne.n	8000ad0 <_malloc_r+0xdc>
 8000a44:	2c00      	cmp	r4, #0
 8000a46:	d048      	beq.n	8000ada <_malloc_r+0xe6>
 8000a48:	6823      	ldr	r3, [r4, #0]
 8000a4a:	4631      	mov	r1, r6
 8000a4c:	4638      	mov	r0, r7
 8000a4e:	eb04 0903 	add.w	r9, r4, r3
 8000a52:	f000 fc73 	bl	800133c <_sbrk_r>
 8000a56:	4581      	cmp	r9, r0
 8000a58:	d13f      	bne.n	8000ada <_malloc_r+0xe6>
 8000a5a:	6821      	ldr	r1, [r4, #0]
 8000a5c:	1a6d      	subs	r5, r5, r1
 8000a5e:	4629      	mov	r1, r5
 8000a60:	4638      	mov	r0, r7
 8000a62:	f7ff ffa7 	bl	80009b4 <sbrk_aligned>
 8000a66:	3001      	adds	r0, #1
 8000a68:	d037      	beq.n	8000ada <_malloc_r+0xe6>
 8000a6a:	6823      	ldr	r3, [r4, #0]
 8000a6c:	442b      	add	r3, r5
 8000a6e:	6023      	str	r3, [r4, #0]
 8000a70:	f8d8 3000 	ldr.w	r3, [r8]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d038      	beq.n	8000aea <_malloc_r+0xf6>
 8000a78:	685a      	ldr	r2, [r3, #4]
 8000a7a:	42a2      	cmp	r2, r4
 8000a7c:	d12b      	bne.n	8000ad6 <_malloc_r+0xe2>
 8000a7e:	2200      	movs	r2, #0
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	e00f      	b.n	8000aa4 <_malloc_r+0xb0>
 8000a84:	6822      	ldr	r2, [r4, #0]
 8000a86:	1b52      	subs	r2, r2, r5
 8000a88:	d41f      	bmi.n	8000aca <_malloc_r+0xd6>
 8000a8a:	2a0b      	cmp	r2, #11
 8000a8c:	d917      	bls.n	8000abe <_malloc_r+0xca>
 8000a8e:	1961      	adds	r1, r4, r5
 8000a90:	42a3      	cmp	r3, r4
 8000a92:	6025      	str	r5, [r4, #0]
 8000a94:	bf18      	it	ne
 8000a96:	6059      	strne	r1, [r3, #4]
 8000a98:	6863      	ldr	r3, [r4, #4]
 8000a9a:	bf08      	it	eq
 8000a9c:	f8c8 1000 	streq.w	r1, [r8]
 8000aa0:	5162      	str	r2, [r4, r5]
 8000aa2:	604b      	str	r3, [r1, #4]
 8000aa4:	4638      	mov	r0, r7
 8000aa6:	f104 060b 	add.w	r6, r4, #11
 8000aaa:	f000 f829 	bl	8000b00 <__malloc_unlock>
 8000aae:	f026 0607 	bic.w	r6, r6, #7
 8000ab2:	1d23      	adds	r3, r4, #4
 8000ab4:	1af2      	subs	r2, r6, r3
 8000ab6:	d0ae      	beq.n	8000a16 <_malloc_r+0x22>
 8000ab8:	1b9b      	subs	r3, r3, r6
 8000aba:	50a3      	str	r3, [r4, r2]
 8000abc:	e7ab      	b.n	8000a16 <_malloc_r+0x22>
 8000abe:	42a3      	cmp	r3, r4
 8000ac0:	6862      	ldr	r2, [r4, #4]
 8000ac2:	d1dd      	bne.n	8000a80 <_malloc_r+0x8c>
 8000ac4:	f8c8 2000 	str.w	r2, [r8]
 8000ac8:	e7ec      	b.n	8000aa4 <_malloc_r+0xb0>
 8000aca:	4623      	mov	r3, r4
 8000acc:	6864      	ldr	r4, [r4, #4]
 8000ace:	e7ac      	b.n	8000a2a <_malloc_r+0x36>
 8000ad0:	4634      	mov	r4, r6
 8000ad2:	6876      	ldr	r6, [r6, #4]
 8000ad4:	e7b4      	b.n	8000a40 <_malloc_r+0x4c>
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	e7cc      	b.n	8000a74 <_malloc_r+0x80>
 8000ada:	230c      	movs	r3, #12
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4638      	mov	r0, r7
 8000ae0:	f000 f80e 	bl	8000b00 <__malloc_unlock>
 8000ae4:	e797      	b.n	8000a16 <_malloc_r+0x22>
 8000ae6:	6025      	str	r5, [r4, #0]
 8000ae8:	e7dc      	b.n	8000aa4 <_malloc_r+0xb0>
 8000aea:	605b      	str	r3, [r3, #4]
 8000aec:	deff      	udf	#255	; 0xff
 8000aee:	bf00      	nop
 8000af0:	200001c0 	.word	0x200001c0

08000af4 <__malloc_lock>:
 8000af4:	4801      	ldr	r0, [pc, #4]	; (8000afc <__malloc_lock+0x8>)
 8000af6:	f7ff bf0e 	b.w	8000916 <__retarget_lock_acquire_recursive>
 8000afa:	bf00      	nop
 8000afc:	200001bc 	.word	0x200001bc

08000b00 <__malloc_unlock>:
 8000b00:	4801      	ldr	r0, [pc, #4]	; (8000b08 <__malloc_unlock+0x8>)
 8000b02:	f7ff bf09 	b.w	8000918 <__retarget_lock_release_recursive>
 8000b06:	bf00      	nop
 8000b08:	200001bc 	.word	0x200001bc

08000b0c <__sfputc_r>:
 8000b0c:	6893      	ldr	r3, [r2, #8]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	b410      	push	{r4}
 8000b14:	6093      	str	r3, [r2, #8]
 8000b16:	da08      	bge.n	8000b2a <__sfputc_r+0x1e>
 8000b18:	6994      	ldr	r4, [r2, #24]
 8000b1a:	42a3      	cmp	r3, r4
 8000b1c:	db01      	blt.n	8000b22 <__sfputc_r+0x16>
 8000b1e:	290a      	cmp	r1, #10
 8000b20:	d103      	bne.n	8000b2a <__sfputc_r+0x1e>
 8000b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b26:	f000 bb73 	b.w	8001210 <__swbuf_r>
 8000b2a:	6813      	ldr	r3, [r2, #0]
 8000b2c:	1c58      	adds	r0, r3, #1
 8000b2e:	6010      	str	r0, [r2, #0]
 8000b30:	7019      	strb	r1, [r3, #0]
 8000b32:	4608      	mov	r0, r1
 8000b34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <__sfputs_r>:
 8000b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b3c:	4606      	mov	r6, r0
 8000b3e:	460f      	mov	r7, r1
 8000b40:	4614      	mov	r4, r2
 8000b42:	18d5      	adds	r5, r2, r3
 8000b44:	42ac      	cmp	r4, r5
 8000b46:	d101      	bne.n	8000b4c <__sfputs_r+0x12>
 8000b48:	2000      	movs	r0, #0
 8000b4a:	e007      	b.n	8000b5c <__sfputs_r+0x22>
 8000b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b50:	463a      	mov	r2, r7
 8000b52:	4630      	mov	r0, r6
 8000b54:	f7ff ffda 	bl	8000b0c <__sfputc_r>
 8000b58:	1c43      	adds	r3, r0, #1
 8000b5a:	d1f3      	bne.n	8000b44 <__sfputs_r+0xa>
 8000b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b60 <_vfiprintf_r>:
 8000b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b64:	460d      	mov	r5, r1
 8000b66:	b09d      	sub	sp, #116	; 0x74
 8000b68:	4614      	mov	r4, r2
 8000b6a:	4698      	mov	r8, r3
 8000b6c:	4606      	mov	r6, r0
 8000b6e:	b118      	cbz	r0, 8000b78 <_vfiprintf_r+0x18>
 8000b70:	6a03      	ldr	r3, [r0, #32]
 8000b72:	b90b      	cbnz	r3, 8000b78 <_vfiprintf_r+0x18>
 8000b74:	f7ff fdca 	bl	800070c <__sinit>
 8000b78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b7a:	07d9      	lsls	r1, r3, #31
 8000b7c:	d405      	bmi.n	8000b8a <_vfiprintf_r+0x2a>
 8000b7e:	89ab      	ldrh	r3, [r5, #12]
 8000b80:	059a      	lsls	r2, r3, #22
 8000b82:	d402      	bmi.n	8000b8a <_vfiprintf_r+0x2a>
 8000b84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b86:	f7ff fec6 	bl	8000916 <__retarget_lock_acquire_recursive>
 8000b8a:	89ab      	ldrh	r3, [r5, #12]
 8000b8c:	071b      	lsls	r3, r3, #28
 8000b8e:	d501      	bpl.n	8000b94 <_vfiprintf_r+0x34>
 8000b90:	692b      	ldr	r3, [r5, #16]
 8000b92:	b99b      	cbnz	r3, 8000bbc <_vfiprintf_r+0x5c>
 8000b94:	4629      	mov	r1, r5
 8000b96:	4630      	mov	r0, r6
 8000b98:	f000 fb78 	bl	800128c <__swsetup_r>
 8000b9c:	b170      	cbz	r0, 8000bbc <_vfiprintf_r+0x5c>
 8000b9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ba0:	07dc      	lsls	r4, r3, #31
 8000ba2:	d504      	bpl.n	8000bae <_vfiprintf_r+0x4e>
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	b01d      	add	sp, #116	; 0x74
 8000baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bae:	89ab      	ldrh	r3, [r5, #12]
 8000bb0:	0598      	lsls	r0, r3, #22
 8000bb2:	d4f7      	bmi.n	8000ba4 <_vfiprintf_r+0x44>
 8000bb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bb6:	f7ff feaf 	bl	8000918 <__retarget_lock_release_recursive>
 8000bba:	e7f3      	b.n	8000ba4 <_vfiprintf_r+0x44>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8000bc0:	2320      	movs	r3, #32
 8000bc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000bc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000bca:	2330      	movs	r3, #48	; 0x30
 8000bcc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000d80 <_vfiprintf_r+0x220>
 8000bd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000bd4:	f04f 0901 	mov.w	r9, #1
 8000bd8:	4623      	mov	r3, r4
 8000bda:	469a      	mov	sl, r3
 8000bdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000be0:	b10a      	cbz	r2, 8000be6 <_vfiprintf_r+0x86>
 8000be2:	2a25      	cmp	r2, #37	; 0x25
 8000be4:	d1f9      	bne.n	8000bda <_vfiprintf_r+0x7a>
 8000be6:	ebba 0b04 	subs.w	fp, sl, r4
 8000bea:	d00b      	beq.n	8000c04 <_vfiprintf_r+0xa4>
 8000bec:	465b      	mov	r3, fp
 8000bee:	4622      	mov	r2, r4
 8000bf0:	4629      	mov	r1, r5
 8000bf2:	4630      	mov	r0, r6
 8000bf4:	f7ff ffa1 	bl	8000b3a <__sfputs_r>
 8000bf8:	3001      	adds	r0, #1
 8000bfa:	f000 80a9 	beq.w	8000d50 <_vfiprintf_r+0x1f0>
 8000bfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c00:	445a      	add	r2, fp
 8000c02:	9209      	str	r2, [sp, #36]	; 0x24
 8000c04:	f89a 3000 	ldrb.w	r3, [sl]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	f000 80a1 	beq.w	8000d50 <_vfiprintf_r+0x1f0>
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f04f 32ff 	mov.w	r2, #4294967295
 8000c14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c18:	f10a 0a01 	add.w	sl, sl, #1
 8000c1c:	9304      	str	r3, [sp, #16]
 8000c1e:	9307      	str	r3, [sp, #28]
 8000c20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c24:	931a      	str	r3, [sp, #104]	; 0x68
 8000c26:	4654      	mov	r4, sl
 8000c28:	2205      	movs	r2, #5
 8000c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c2e:	4854      	ldr	r0, [pc, #336]	; (8000d80 <_vfiprintf_r+0x220>)
 8000c30:	f7ff fade 	bl	80001f0 <memchr>
 8000c34:	9a04      	ldr	r2, [sp, #16]
 8000c36:	b9d8      	cbnz	r0, 8000c70 <_vfiprintf_r+0x110>
 8000c38:	06d1      	lsls	r1, r2, #27
 8000c3a:	bf44      	itt	mi
 8000c3c:	2320      	movmi	r3, #32
 8000c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c42:	0713      	lsls	r3, r2, #28
 8000c44:	bf44      	itt	mi
 8000c46:	232b      	movmi	r3, #43	; 0x2b
 8000c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8000c50:	2b2a      	cmp	r3, #42	; 0x2a
 8000c52:	d015      	beq.n	8000c80 <_vfiprintf_r+0x120>
 8000c54:	9a07      	ldr	r2, [sp, #28]
 8000c56:	4654      	mov	r4, sl
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f04f 0c0a 	mov.w	ip, #10
 8000c5e:	4621      	mov	r1, r4
 8000c60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c64:	3b30      	subs	r3, #48	; 0x30
 8000c66:	2b09      	cmp	r3, #9
 8000c68:	d94d      	bls.n	8000d06 <_vfiprintf_r+0x1a6>
 8000c6a:	b1b0      	cbz	r0, 8000c9a <_vfiprintf_r+0x13a>
 8000c6c:	9207      	str	r2, [sp, #28]
 8000c6e:	e014      	b.n	8000c9a <_vfiprintf_r+0x13a>
 8000c70:	eba0 0308 	sub.w	r3, r0, r8
 8000c74:	fa09 f303 	lsl.w	r3, r9, r3
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	9304      	str	r3, [sp, #16]
 8000c7c:	46a2      	mov	sl, r4
 8000c7e:	e7d2      	b.n	8000c26 <_vfiprintf_r+0xc6>
 8000c80:	9b03      	ldr	r3, [sp, #12]
 8000c82:	1d19      	adds	r1, r3, #4
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	9103      	str	r1, [sp, #12]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	bfbb      	ittet	lt
 8000c8c:	425b      	neglt	r3, r3
 8000c8e:	f042 0202 	orrlt.w	r2, r2, #2
 8000c92:	9307      	strge	r3, [sp, #28]
 8000c94:	9307      	strlt	r3, [sp, #28]
 8000c96:	bfb8      	it	lt
 8000c98:	9204      	strlt	r2, [sp, #16]
 8000c9a:	7823      	ldrb	r3, [r4, #0]
 8000c9c:	2b2e      	cmp	r3, #46	; 0x2e
 8000c9e:	d10c      	bne.n	8000cba <_vfiprintf_r+0x15a>
 8000ca0:	7863      	ldrb	r3, [r4, #1]
 8000ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8000ca4:	d134      	bne.n	8000d10 <_vfiprintf_r+0x1b0>
 8000ca6:	9b03      	ldr	r3, [sp, #12]
 8000ca8:	1d1a      	adds	r2, r3, #4
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	9203      	str	r2, [sp, #12]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	bfb8      	it	lt
 8000cb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8000cb6:	3402      	adds	r4, #2
 8000cb8:	9305      	str	r3, [sp, #20]
 8000cba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000d90 <_vfiprintf_r+0x230>
 8000cbe:	7821      	ldrb	r1, [r4, #0]
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	4650      	mov	r0, sl
 8000cc4:	f7ff fa94 	bl	80001f0 <memchr>
 8000cc8:	b138      	cbz	r0, 8000cda <_vfiprintf_r+0x17a>
 8000cca:	9b04      	ldr	r3, [sp, #16]
 8000ccc:	eba0 000a 	sub.w	r0, r0, sl
 8000cd0:	2240      	movs	r2, #64	; 0x40
 8000cd2:	4082      	lsls	r2, r0
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	3401      	adds	r4, #1
 8000cd8:	9304      	str	r3, [sp, #16]
 8000cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cde:	4829      	ldr	r0, [pc, #164]	; (8000d84 <_vfiprintf_r+0x224>)
 8000ce0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000ce4:	2206      	movs	r2, #6
 8000ce6:	f7ff fa83 	bl	80001f0 <memchr>
 8000cea:	2800      	cmp	r0, #0
 8000cec:	d03f      	beq.n	8000d6e <_vfiprintf_r+0x20e>
 8000cee:	4b26      	ldr	r3, [pc, #152]	; (8000d88 <_vfiprintf_r+0x228>)
 8000cf0:	bb1b      	cbnz	r3, 8000d3a <_vfiprintf_r+0x1da>
 8000cf2:	9b03      	ldr	r3, [sp, #12]
 8000cf4:	3307      	adds	r3, #7
 8000cf6:	f023 0307 	bic.w	r3, r3, #7
 8000cfa:	3308      	adds	r3, #8
 8000cfc:	9303      	str	r3, [sp, #12]
 8000cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d00:	443b      	add	r3, r7
 8000d02:	9309      	str	r3, [sp, #36]	; 0x24
 8000d04:	e768      	b.n	8000bd8 <_vfiprintf_r+0x78>
 8000d06:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d0a:	460c      	mov	r4, r1
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	e7a6      	b.n	8000c5e <_vfiprintf_r+0xfe>
 8000d10:	2300      	movs	r3, #0
 8000d12:	3401      	adds	r4, #1
 8000d14:	9305      	str	r3, [sp, #20]
 8000d16:	4619      	mov	r1, r3
 8000d18:	f04f 0c0a 	mov.w	ip, #10
 8000d1c:	4620      	mov	r0, r4
 8000d1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d22:	3a30      	subs	r2, #48	; 0x30
 8000d24:	2a09      	cmp	r2, #9
 8000d26:	d903      	bls.n	8000d30 <_vfiprintf_r+0x1d0>
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d0c6      	beq.n	8000cba <_vfiprintf_r+0x15a>
 8000d2c:	9105      	str	r1, [sp, #20]
 8000d2e:	e7c4      	b.n	8000cba <_vfiprintf_r+0x15a>
 8000d30:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d34:	4604      	mov	r4, r0
 8000d36:	2301      	movs	r3, #1
 8000d38:	e7f0      	b.n	8000d1c <_vfiprintf_r+0x1bc>
 8000d3a:	ab03      	add	r3, sp, #12
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	462a      	mov	r2, r5
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <_vfiprintf_r+0x22c>)
 8000d42:	a904      	add	r1, sp, #16
 8000d44:	4630      	mov	r0, r6
 8000d46:	f3af 8000 	nop.w
 8000d4a:	4607      	mov	r7, r0
 8000d4c:	1c78      	adds	r0, r7, #1
 8000d4e:	d1d6      	bne.n	8000cfe <_vfiprintf_r+0x19e>
 8000d50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d52:	07d9      	lsls	r1, r3, #31
 8000d54:	d405      	bmi.n	8000d62 <_vfiprintf_r+0x202>
 8000d56:	89ab      	ldrh	r3, [r5, #12]
 8000d58:	059a      	lsls	r2, r3, #22
 8000d5a:	d402      	bmi.n	8000d62 <_vfiprintf_r+0x202>
 8000d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d5e:	f7ff fddb 	bl	8000918 <__retarget_lock_release_recursive>
 8000d62:	89ab      	ldrh	r3, [r5, #12]
 8000d64:	065b      	lsls	r3, r3, #25
 8000d66:	f53f af1d 	bmi.w	8000ba4 <_vfiprintf_r+0x44>
 8000d6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d6c:	e71c      	b.n	8000ba8 <_vfiprintf_r+0x48>
 8000d6e:	ab03      	add	r3, sp, #12
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	462a      	mov	r2, r5
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <_vfiprintf_r+0x22c>)
 8000d76:	a904      	add	r1, sp, #16
 8000d78:	4630      	mov	r0, r6
 8000d7a:	f000 f879 	bl	8000e70 <_printf_i>
 8000d7e:	e7e4      	b.n	8000d4a <_vfiprintf_r+0x1ea>
 8000d80:	08001481 	.word	0x08001481
 8000d84:	0800148b 	.word	0x0800148b
 8000d88:	00000000 	.word	0x00000000
 8000d8c:	08000b3b 	.word	0x08000b3b
 8000d90:	08001487 	.word	0x08001487

08000d94 <_printf_common>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	4616      	mov	r6, r2
 8000d9a:	4699      	mov	r9, r3
 8000d9c:	688a      	ldr	r2, [r1, #8]
 8000d9e:	690b      	ldr	r3, [r1, #16]
 8000da0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000da4:	4293      	cmp	r3, r2
 8000da6:	bfb8      	it	lt
 8000da8:	4613      	movlt	r3, r2
 8000daa:	6033      	str	r3, [r6, #0]
 8000dac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000db0:	4607      	mov	r7, r0
 8000db2:	460c      	mov	r4, r1
 8000db4:	b10a      	cbz	r2, 8000dba <_printf_common+0x26>
 8000db6:	3301      	adds	r3, #1
 8000db8:	6033      	str	r3, [r6, #0]
 8000dba:	6823      	ldr	r3, [r4, #0]
 8000dbc:	0699      	lsls	r1, r3, #26
 8000dbe:	bf42      	ittt	mi
 8000dc0:	6833      	ldrmi	r3, [r6, #0]
 8000dc2:	3302      	addmi	r3, #2
 8000dc4:	6033      	strmi	r3, [r6, #0]
 8000dc6:	6825      	ldr	r5, [r4, #0]
 8000dc8:	f015 0506 	ands.w	r5, r5, #6
 8000dcc:	d106      	bne.n	8000ddc <_printf_common+0x48>
 8000dce:	f104 0a19 	add.w	sl, r4, #25
 8000dd2:	68e3      	ldr	r3, [r4, #12]
 8000dd4:	6832      	ldr	r2, [r6, #0]
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	42ab      	cmp	r3, r5
 8000dda:	dc26      	bgt.n	8000e2a <_printf_common+0x96>
 8000ddc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000de0:	1e13      	subs	r3, r2, #0
 8000de2:	6822      	ldr	r2, [r4, #0]
 8000de4:	bf18      	it	ne
 8000de6:	2301      	movne	r3, #1
 8000de8:	0692      	lsls	r2, r2, #26
 8000dea:	d42b      	bmi.n	8000e44 <_printf_common+0xb0>
 8000dec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000df0:	4649      	mov	r1, r9
 8000df2:	4638      	mov	r0, r7
 8000df4:	47c0      	blx	r8
 8000df6:	3001      	adds	r0, #1
 8000df8:	d01e      	beq.n	8000e38 <_printf_common+0xa4>
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	6922      	ldr	r2, [r4, #16]
 8000dfe:	f003 0306 	and.w	r3, r3, #6
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	bf02      	ittt	eq
 8000e06:	68e5      	ldreq	r5, [r4, #12]
 8000e08:	6833      	ldreq	r3, [r6, #0]
 8000e0a:	1aed      	subeq	r5, r5, r3
 8000e0c:	68a3      	ldr	r3, [r4, #8]
 8000e0e:	bf0c      	ite	eq
 8000e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e14:	2500      	movne	r5, #0
 8000e16:	4293      	cmp	r3, r2
 8000e18:	bfc4      	itt	gt
 8000e1a:	1a9b      	subgt	r3, r3, r2
 8000e1c:	18ed      	addgt	r5, r5, r3
 8000e1e:	2600      	movs	r6, #0
 8000e20:	341a      	adds	r4, #26
 8000e22:	42b5      	cmp	r5, r6
 8000e24:	d11a      	bne.n	8000e5c <_printf_common+0xc8>
 8000e26:	2000      	movs	r0, #0
 8000e28:	e008      	b.n	8000e3c <_printf_common+0xa8>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	4652      	mov	r2, sl
 8000e2e:	4649      	mov	r1, r9
 8000e30:	4638      	mov	r0, r7
 8000e32:	47c0      	blx	r8
 8000e34:	3001      	adds	r0, #1
 8000e36:	d103      	bne.n	8000e40 <_printf_common+0xac>
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e40:	3501      	adds	r5, #1
 8000e42:	e7c6      	b.n	8000dd2 <_printf_common+0x3e>
 8000e44:	18e1      	adds	r1, r4, r3
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	2030      	movs	r0, #48	; 0x30
 8000e4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000e4e:	4422      	add	r2, r4
 8000e50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000e54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000e58:	3302      	adds	r3, #2
 8000e5a:	e7c7      	b.n	8000dec <_printf_common+0x58>
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	4622      	mov	r2, r4
 8000e60:	4649      	mov	r1, r9
 8000e62:	4638      	mov	r0, r7
 8000e64:	47c0      	blx	r8
 8000e66:	3001      	adds	r0, #1
 8000e68:	d0e6      	beq.n	8000e38 <_printf_common+0xa4>
 8000e6a:	3601      	adds	r6, #1
 8000e6c:	e7d9      	b.n	8000e22 <_printf_common+0x8e>
	...

08000e70 <_printf_i>:
 8000e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e74:	7e0f      	ldrb	r7, [r1, #24]
 8000e76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e78:	2f78      	cmp	r7, #120	; 0x78
 8000e7a:	4691      	mov	r9, r2
 8000e7c:	4680      	mov	r8, r0
 8000e7e:	460c      	mov	r4, r1
 8000e80:	469a      	mov	sl, r3
 8000e82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000e86:	d807      	bhi.n	8000e98 <_printf_i+0x28>
 8000e88:	2f62      	cmp	r7, #98	; 0x62
 8000e8a:	d80a      	bhi.n	8000ea2 <_printf_i+0x32>
 8000e8c:	2f00      	cmp	r7, #0
 8000e8e:	f000 80d4 	beq.w	800103a <_printf_i+0x1ca>
 8000e92:	2f58      	cmp	r7, #88	; 0x58
 8000e94:	f000 80c0 	beq.w	8001018 <_printf_i+0x1a8>
 8000e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000ea0:	e03a      	b.n	8000f18 <_printf_i+0xa8>
 8000ea2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000ea6:	2b15      	cmp	r3, #21
 8000ea8:	d8f6      	bhi.n	8000e98 <_printf_i+0x28>
 8000eaa:	a101      	add	r1, pc, #4	; (adr r1, 8000eb0 <_printf_i+0x40>)
 8000eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000eb0:	08000f09 	.word	0x08000f09
 8000eb4:	08000f1d 	.word	0x08000f1d
 8000eb8:	08000e99 	.word	0x08000e99
 8000ebc:	08000e99 	.word	0x08000e99
 8000ec0:	08000e99 	.word	0x08000e99
 8000ec4:	08000e99 	.word	0x08000e99
 8000ec8:	08000f1d 	.word	0x08000f1d
 8000ecc:	08000e99 	.word	0x08000e99
 8000ed0:	08000e99 	.word	0x08000e99
 8000ed4:	08000e99 	.word	0x08000e99
 8000ed8:	08000e99 	.word	0x08000e99
 8000edc:	08001021 	.word	0x08001021
 8000ee0:	08000f49 	.word	0x08000f49
 8000ee4:	08000fdb 	.word	0x08000fdb
 8000ee8:	08000e99 	.word	0x08000e99
 8000eec:	08000e99 	.word	0x08000e99
 8000ef0:	08001043 	.word	0x08001043
 8000ef4:	08000e99 	.word	0x08000e99
 8000ef8:	08000f49 	.word	0x08000f49
 8000efc:	08000e99 	.word	0x08000e99
 8000f00:	08000e99 	.word	0x08000e99
 8000f04:	08000fe3 	.word	0x08000fe3
 8000f08:	682b      	ldr	r3, [r5, #0]
 8000f0a:	1d1a      	adds	r2, r3, #4
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	602a      	str	r2, [r5, #0]
 8000f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e09f      	b.n	800105c <_printf_i+0x1ec>
 8000f1c:	6820      	ldr	r0, [r4, #0]
 8000f1e:	682b      	ldr	r3, [r5, #0]
 8000f20:	0607      	lsls	r7, r0, #24
 8000f22:	f103 0104 	add.w	r1, r3, #4
 8000f26:	6029      	str	r1, [r5, #0]
 8000f28:	d501      	bpl.n	8000f2e <_printf_i+0xbe>
 8000f2a:	681e      	ldr	r6, [r3, #0]
 8000f2c:	e003      	b.n	8000f36 <_printf_i+0xc6>
 8000f2e:	0646      	lsls	r6, r0, #25
 8000f30:	d5fb      	bpl.n	8000f2a <_printf_i+0xba>
 8000f32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	da03      	bge.n	8000f42 <_printf_i+0xd2>
 8000f3a:	232d      	movs	r3, #45	; 0x2d
 8000f3c:	4276      	negs	r6, r6
 8000f3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f42:	485a      	ldr	r0, [pc, #360]	; (80010ac <_printf_i+0x23c>)
 8000f44:	230a      	movs	r3, #10
 8000f46:	e012      	b.n	8000f6e <_printf_i+0xfe>
 8000f48:	682b      	ldr	r3, [r5, #0]
 8000f4a:	6820      	ldr	r0, [r4, #0]
 8000f4c:	1d19      	adds	r1, r3, #4
 8000f4e:	6029      	str	r1, [r5, #0]
 8000f50:	0605      	lsls	r5, r0, #24
 8000f52:	d501      	bpl.n	8000f58 <_printf_i+0xe8>
 8000f54:	681e      	ldr	r6, [r3, #0]
 8000f56:	e002      	b.n	8000f5e <_printf_i+0xee>
 8000f58:	0641      	lsls	r1, r0, #25
 8000f5a:	d5fb      	bpl.n	8000f54 <_printf_i+0xe4>
 8000f5c:	881e      	ldrh	r6, [r3, #0]
 8000f5e:	4853      	ldr	r0, [pc, #332]	; (80010ac <_printf_i+0x23c>)
 8000f60:	2f6f      	cmp	r7, #111	; 0x6f
 8000f62:	bf0c      	ite	eq
 8000f64:	2308      	moveq	r3, #8
 8000f66:	230a      	movne	r3, #10
 8000f68:	2100      	movs	r1, #0
 8000f6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000f6e:	6865      	ldr	r5, [r4, #4]
 8000f70:	60a5      	str	r5, [r4, #8]
 8000f72:	2d00      	cmp	r5, #0
 8000f74:	bfa2      	ittt	ge
 8000f76:	6821      	ldrge	r1, [r4, #0]
 8000f78:	f021 0104 	bicge.w	r1, r1, #4
 8000f7c:	6021      	strge	r1, [r4, #0]
 8000f7e:	b90e      	cbnz	r6, 8000f84 <_printf_i+0x114>
 8000f80:	2d00      	cmp	r5, #0
 8000f82:	d04b      	beq.n	800101c <_printf_i+0x1ac>
 8000f84:	4615      	mov	r5, r2
 8000f86:	fbb6 f1f3 	udiv	r1, r6, r3
 8000f8a:	fb03 6711 	mls	r7, r3, r1, r6
 8000f8e:	5dc7      	ldrb	r7, [r0, r7]
 8000f90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000f94:	4637      	mov	r7, r6
 8000f96:	42bb      	cmp	r3, r7
 8000f98:	460e      	mov	r6, r1
 8000f9a:	d9f4      	bls.n	8000f86 <_printf_i+0x116>
 8000f9c:	2b08      	cmp	r3, #8
 8000f9e:	d10b      	bne.n	8000fb8 <_printf_i+0x148>
 8000fa0:	6823      	ldr	r3, [r4, #0]
 8000fa2:	07de      	lsls	r6, r3, #31
 8000fa4:	d508      	bpl.n	8000fb8 <_printf_i+0x148>
 8000fa6:	6923      	ldr	r3, [r4, #16]
 8000fa8:	6861      	ldr	r1, [r4, #4]
 8000faa:	4299      	cmp	r1, r3
 8000fac:	bfde      	ittt	le
 8000fae:	2330      	movle	r3, #48	; 0x30
 8000fb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000fb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000fb8:	1b52      	subs	r2, r2, r5
 8000fba:	6122      	str	r2, [r4, #16]
 8000fbc:	f8cd a000 	str.w	sl, [sp]
 8000fc0:	464b      	mov	r3, r9
 8000fc2:	aa03      	add	r2, sp, #12
 8000fc4:	4621      	mov	r1, r4
 8000fc6:	4640      	mov	r0, r8
 8000fc8:	f7ff fee4 	bl	8000d94 <_printf_common>
 8000fcc:	3001      	adds	r0, #1
 8000fce:	d14a      	bne.n	8001066 <_printf_i+0x1f6>
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	b004      	add	sp, #16
 8000fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fda:	6823      	ldr	r3, [r4, #0]
 8000fdc:	f043 0320 	orr.w	r3, r3, #32
 8000fe0:	6023      	str	r3, [r4, #0]
 8000fe2:	4833      	ldr	r0, [pc, #204]	; (80010b0 <_printf_i+0x240>)
 8000fe4:	2778      	movs	r7, #120	; 0x78
 8000fe6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	6829      	ldr	r1, [r5, #0]
 8000fee:	061f      	lsls	r7, r3, #24
 8000ff0:	f851 6b04 	ldr.w	r6, [r1], #4
 8000ff4:	d402      	bmi.n	8000ffc <_printf_i+0x18c>
 8000ff6:	065f      	lsls	r7, r3, #25
 8000ff8:	bf48      	it	mi
 8000ffa:	b2b6      	uxthmi	r6, r6
 8000ffc:	07df      	lsls	r7, r3, #31
 8000ffe:	bf48      	it	mi
 8001000:	f043 0320 	orrmi.w	r3, r3, #32
 8001004:	6029      	str	r1, [r5, #0]
 8001006:	bf48      	it	mi
 8001008:	6023      	strmi	r3, [r4, #0]
 800100a:	b91e      	cbnz	r6, 8001014 <_printf_i+0x1a4>
 800100c:	6823      	ldr	r3, [r4, #0]
 800100e:	f023 0320 	bic.w	r3, r3, #32
 8001012:	6023      	str	r3, [r4, #0]
 8001014:	2310      	movs	r3, #16
 8001016:	e7a7      	b.n	8000f68 <_printf_i+0xf8>
 8001018:	4824      	ldr	r0, [pc, #144]	; (80010ac <_printf_i+0x23c>)
 800101a:	e7e4      	b.n	8000fe6 <_printf_i+0x176>
 800101c:	4615      	mov	r5, r2
 800101e:	e7bd      	b.n	8000f9c <_printf_i+0x12c>
 8001020:	682b      	ldr	r3, [r5, #0]
 8001022:	6826      	ldr	r6, [r4, #0]
 8001024:	6961      	ldr	r1, [r4, #20]
 8001026:	1d18      	adds	r0, r3, #4
 8001028:	6028      	str	r0, [r5, #0]
 800102a:	0635      	lsls	r5, r6, #24
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	d501      	bpl.n	8001034 <_printf_i+0x1c4>
 8001030:	6019      	str	r1, [r3, #0]
 8001032:	e002      	b.n	800103a <_printf_i+0x1ca>
 8001034:	0670      	lsls	r0, r6, #25
 8001036:	d5fb      	bpl.n	8001030 <_printf_i+0x1c0>
 8001038:	8019      	strh	r1, [r3, #0]
 800103a:	2300      	movs	r3, #0
 800103c:	6123      	str	r3, [r4, #16]
 800103e:	4615      	mov	r5, r2
 8001040:	e7bc      	b.n	8000fbc <_printf_i+0x14c>
 8001042:	682b      	ldr	r3, [r5, #0]
 8001044:	1d1a      	adds	r2, r3, #4
 8001046:	602a      	str	r2, [r5, #0]
 8001048:	681d      	ldr	r5, [r3, #0]
 800104a:	6862      	ldr	r2, [r4, #4]
 800104c:	2100      	movs	r1, #0
 800104e:	4628      	mov	r0, r5
 8001050:	f7ff f8ce 	bl	80001f0 <memchr>
 8001054:	b108      	cbz	r0, 800105a <_printf_i+0x1ea>
 8001056:	1b40      	subs	r0, r0, r5
 8001058:	6060      	str	r0, [r4, #4]
 800105a:	6863      	ldr	r3, [r4, #4]
 800105c:	6123      	str	r3, [r4, #16]
 800105e:	2300      	movs	r3, #0
 8001060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001064:	e7aa      	b.n	8000fbc <_printf_i+0x14c>
 8001066:	6923      	ldr	r3, [r4, #16]
 8001068:	462a      	mov	r2, r5
 800106a:	4649      	mov	r1, r9
 800106c:	4640      	mov	r0, r8
 800106e:	47d0      	blx	sl
 8001070:	3001      	adds	r0, #1
 8001072:	d0ad      	beq.n	8000fd0 <_printf_i+0x160>
 8001074:	6823      	ldr	r3, [r4, #0]
 8001076:	079b      	lsls	r3, r3, #30
 8001078:	d413      	bmi.n	80010a2 <_printf_i+0x232>
 800107a:	68e0      	ldr	r0, [r4, #12]
 800107c:	9b03      	ldr	r3, [sp, #12]
 800107e:	4298      	cmp	r0, r3
 8001080:	bfb8      	it	lt
 8001082:	4618      	movlt	r0, r3
 8001084:	e7a6      	b.n	8000fd4 <_printf_i+0x164>
 8001086:	2301      	movs	r3, #1
 8001088:	4632      	mov	r2, r6
 800108a:	4649      	mov	r1, r9
 800108c:	4640      	mov	r0, r8
 800108e:	47d0      	blx	sl
 8001090:	3001      	adds	r0, #1
 8001092:	d09d      	beq.n	8000fd0 <_printf_i+0x160>
 8001094:	3501      	adds	r5, #1
 8001096:	68e3      	ldr	r3, [r4, #12]
 8001098:	9903      	ldr	r1, [sp, #12]
 800109a:	1a5b      	subs	r3, r3, r1
 800109c:	42ab      	cmp	r3, r5
 800109e:	dcf2      	bgt.n	8001086 <_printf_i+0x216>
 80010a0:	e7eb      	b.n	800107a <_printf_i+0x20a>
 80010a2:	2500      	movs	r5, #0
 80010a4:	f104 0619 	add.w	r6, r4, #25
 80010a8:	e7f5      	b.n	8001096 <_printf_i+0x226>
 80010aa:	bf00      	nop
 80010ac:	08001492 	.word	0x08001492
 80010b0:	080014a3 	.word	0x080014a3

080010b4 <__sflush_r>:
 80010b4:	898a      	ldrh	r2, [r1, #12]
 80010b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010ba:	4605      	mov	r5, r0
 80010bc:	0710      	lsls	r0, r2, #28
 80010be:	460c      	mov	r4, r1
 80010c0:	d458      	bmi.n	8001174 <__sflush_r+0xc0>
 80010c2:	684b      	ldr	r3, [r1, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	dc05      	bgt.n	80010d4 <__sflush_r+0x20>
 80010c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	dc02      	bgt.n	80010d4 <__sflush_r+0x20>
 80010ce:	2000      	movs	r0, #0
 80010d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80010d6:	2e00      	cmp	r6, #0
 80010d8:	d0f9      	beq.n	80010ce <__sflush_r+0x1a>
 80010da:	2300      	movs	r3, #0
 80010dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80010e0:	682f      	ldr	r7, [r5, #0]
 80010e2:	6a21      	ldr	r1, [r4, #32]
 80010e4:	602b      	str	r3, [r5, #0]
 80010e6:	d032      	beq.n	800114e <__sflush_r+0x9a>
 80010e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80010ea:	89a3      	ldrh	r3, [r4, #12]
 80010ec:	075a      	lsls	r2, r3, #29
 80010ee:	d505      	bpl.n	80010fc <__sflush_r+0x48>
 80010f0:	6863      	ldr	r3, [r4, #4]
 80010f2:	1ac0      	subs	r0, r0, r3
 80010f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80010f6:	b10b      	cbz	r3, 80010fc <__sflush_r+0x48>
 80010f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010fa:	1ac0      	subs	r0, r0, r3
 80010fc:	2300      	movs	r3, #0
 80010fe:	4602      	mov	r2, r0
 8001100:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001102:	6a21      	ldr	r1, [r4, #32]
 8001104:	4628      	mov	r0, r5
 8001106:	47b0      	blx	r6
 8001108:	1c43      	adds	r3, r0, #1
 800110a:	89a3      	ldrh	r3, [r4, #12]
 800110c:	d106      	bne.n	800111c <__sflush_r+0x68>
 800110e:	6829      	ldr	r1, [r5, #0]
 8001110:	291d      	cmp	r1, #29
 8001112:	d82b      	bhi.n	800116c <__sflush_r+0xb8>
 8001114:	4a29      	ldr	r2, [pc, #164]	; (80011bc <__sflush_r+0x108>)
 8001116:	410a      	asrs	r2, r1
 8001118:	07d6      	lsls	r6, r2, #31
 800111a:	d427      	bmi.n	800116c <__sflush_r+0xb8>
 800111c:	2200      	movs	r2, #0
 800111e:	6062      	str	r2, [r4, #4]
 8001120:	04d9      	lsls	r1, r3, #19
 8001122:	6922      	ldr	r2, [r4, #16]
 8001124:	6022      	str	r2, [r4, #0]
 8001126:	d504      	bpl.n	8001132 <__sflush_r+0x7e>
 8001128:	1c42      	adds	r2, r0, #1
 800112a:	d101      	bne.n	8001130 <__sflush_r+0x7c>
 800112c:	682b      	ldr	r3, [r5, #0]
 800112e:	b903      	cbnz	r3, 8001132 <__sflush_r+0x7e>
 8001130:	6560      	str	r0, [r4, #84]	; 0x54
 8001132:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001134:	602f      	str	r7, [r5, #0]
 8001136:	2900      	cmp	r1, #0
 8001138:	d0c9      	beq.n	80010ce <__sflush_r+0x1a>
 800113a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800113e:	4299      	cmp	r1, r3
 8001140:	d002      	beq.n	8001148 <__sflush_r+0x94>
 8001142:	4628      	mov	r0, r5
 8001144:	f7ff fbea 	bl	800091c <_free_r>
 8001148:	2000      	movs	r0, #0
 800114a:	6360      	str	r0, [r4, #52]	; 0x34
 800114c:	e7c0      	b.n	80010d0 <__sflush_r+0x1c>
 800114e:	2301      	movs	r3, #1
 8001150:	4628      	mov	r0, r5
 8001152:	47b0      	blx	r6
 8001154:	1c41      	adds	r1, r0, #1
 8001156:	d1c8      	bne.n	80010ea <__sflush_r+0x36>
 8001158:	682b      	ldr	r3, [r5, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0c5      	beq.n	80010ea <__sflush_r+0x36>
 800115e:	2b1d      	cmp	r3, #29
 8001160:	d001      	beq.n	8001166 <__sflush_r+0xb2>
 8001162:	2b16      	cmp	r3, #22
 8001164:	d101      	bne.n	800116a <__sflush_r+0xb6>
 8001166:	602f      	str	r7, [r5, #0]
 8001168:	e7b1      	b.n	80010ce <__sflush_r+0x1a>
 800116a:	89a3      	ldrh	r3, [r4, #12]
 800116c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001170:	81a3      	strh	r3, [r4, #12]
 8001172:	e7ad      	b.n	80010d0 <__sflush_r+0x1c>
 8001174:	690f      	ldr	r7, [r1, #16]
 8001176:	2f00      	cmp	r7, #0
 8001178:	d0a9      	beq.n	80010ce <__sflush_r+0x1a>
 800117a:	0793      	lsls	r3, r2, #30
 800117c:	680e      	ldr	r6, [r1, #0]
 800117e:	bf08      	it	eq
 8001180:	694b      	ldreq	r3, [r1, #20]
 8001182:	600f      	str	r7, [r1, #0]
 8001184:	bf18      	it	ne
 8001186:	2300      	movne	r3, #0
 8001188:	eba6 0807 	sub.w	r8, r6, r7
 800118c:	608b      	str	r3, [r1, #8]
 800118e:	f1b8 0f00 	cmp.w	r8, #0
 8001192:	dd9c      	ble.n	80010ce <__sflush_r+0x1a>
 8001194:	6a21      	ldr	r1, [r4, #32]
 8001196:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001198:	4643      	mov	r3, r8
 800119a:	463a      	mov	r2, r7
 800119c:	4628      	mov	r0, r5
 800119e:	47b0      	blx	r6
 80011a0:	2800      	cmp	r0, #0
 80011a2:	dc06      	bgt.n	80011b2 <__sflush_r+0xfe>
 80011a4:	89a3      	ldrh	r3, [r4, #12]
 80011a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011aa:	81a3      	strh	r3, [r4, #12]
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	e78e      	b.n	80010d0 <__sflush_r+0x1c>
 80011b2:	4407      	add	r7, r0
 80011b4:	eba8 0800 	sub.w	r8, r8, r0
 80011b8:	e7e9      	b.n	800118e <__sflush_r+0xda>
 80011ba:	bf00      	nop
 80011bc:	dfbffffe 	.word	0xdfbffffe

080011c0 <_fflush_r>:
 80011c0:	b538      	push	{r3, r4, r5, lr}
 80011c2:	690b      	ldr	r3, [r1, #16]
 80011c4:	4605      	mov	r5, r0
 80011c6:	460c      	mov	r4, r1
 80011c8:	b913      	cbnz	r3, 80011d0 <_fflush_r+0x10>
 80011ca:	2500      	movs	r5, #0
 80011cc:	4628      	mov	r0, r5
 80011ce:	bd38      	pop	{r3, r4, r5, pc}
 80011d0:	b118      	cbz	r0, 80011da <_fflush_r+0x1a>
 80011d2:	6a03      	ldr	r3, [r0, #32]
 80011d4:	b90b      	cbnz	r3, 80011da <_fflush_r+0x1a>
 80011d6:	f7ff fa99 	bl	800070c <__sinit>
 80011da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f3      	beq.n	80011ca <_fflush_r+0xa>
 80011e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80011e4:	07d0      	lsls	r0, r2, #31
 80011e6:	d404      	bmi.n	80011f2 <_fflush_r+0x32>
 80011e8:	0599      	lsls	r1, r3, #22
 80011ea:	d402      	bmi.n	80011f2 <_fflush_r+0x32>
 80011ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80011ee:	f7ff fb92 	bl	8000916 <__retarget_lock_acquire_recursive>
 80011f2:	4628      	mov	r0, r5
 80011f4:	4621      	mov	r1, r4
 80011f6:	f7ff ff5d 	bl	80010b4 <__sflush_r>
 80011fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80011fc:	07da      	lsls	r2, r3, #31
 80011fe:	4605      	mov	r5, r0
 8001200:	d4e4      	bmi.n	80011cc <_fflush_r+0xc>
 8001202:	89a3      	ldrh	r3, [r4, #12]
 8001204:	059b      	lsls	r3, r3, #22
 8001206:	d4e1      	bmi.n	80011cc <_fflush_r+0xc>
 8001208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800120a:	f7ff fb85 	bl	8000918 <__retarget_lock_release_recursive>
 800120e:	e7dd      	b.n	80011cc <_fflush_r+0xc>

08001210 <__swbuf_r>:
 8001210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001212:	460e      	mov	r6, r1
 8001214:	4614      	mov	r4, r2
 8001216:	4605      	mov	r5, r0
 8001218:	b118      	cbz	r0, 8001222 <__swbuf_r+0x12>
 800121a:	6a03      	ldr	r3, [r0, #32]
 800121c:	b90b      	cbnz	r3, 8001222 <__swbuf_r+0x12>
 800121e:	f7ff fa75 	bl	800070c <__sinit>
 8001222:	69a3      	ldr	r3, [r4, #24]
 8001224:	60a3      	str	r3, [r4, #8]
 8001226:	89a3      	ldrh	r3, [r4, #12]
 8001228:	071a      	lsls	r2, r3, #28
 800122a:	d525      	bpl.n	8001278 <__swbuf_r+0x68>
 800122c:	6923      	ldr	r3, [r4, #16]
 800122e:	b31b      	cbz	r3, 8001278 <__swbuf_r+0x68>
 8001230:	6823      	ldr	r3, [r4, #0]
 8001232:	6922      	ldr	r2, [r4, #16]
 8001234:	1a98      	subs	r0, r3, r2
 8001236:	6963      	ldr	r3, [r4, #20]
 8001238:	b2f6      	uxtb	r6, r6
 800123a:	4283      	cmp	r3, r0
 800123c:	4637      	mov	r7, r6
 800123e:	dc04      	bgt.n	800124a <__swbuf_r+0x3a>
 8001240:	4621      	mov	r1, r4
 8001242:	4628      	mov	r0, r5
 8001244:	f7ff ffbc 	bl	80011c0 <_fflush_r>
 8001248:	b9e0      	cbnz	r0, 8001284 <__swbuf_r+0x74>
 800124a:	68a3      	ldr	r3, [r4, #8]
 800124c:	3b01      	subs	r3, #1
 800124e:	60a3      	str	r3, [r4, #8]
 8001250:	6823      	ldr	r3, [r4, #0]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	6022      	str	r2, [r4, #0]
 8001256:	701e      	strb	r6, [r3, #0]
 8001258:	6962      	ldr	r2, [r4, #20]
 800125a:	1c43      	adds	r3, r0, #1
 800125c:	429a      	cmp	r2, r3
 800125e:	d004      	beq.n	800126a <__swbuf_r+0x5a>
 8001260:	89a3      	ldrh	r3, [r4, #12]
 8001262:	07db      	lsls	r3, r3, #31
 8001264:	d506      	bpl.n	8001274 <__swbuf_r+0x64>
 8001266:	2e0a      	cmp	r6, #10
 8001268:	d104      	bne.n	8001274 <__swbuf_r+0x64>
 800126a:	4621      	mov	r1, r4
 800126c:	4628      	mov	r0, r5
 800126e:	f7ff ffa7 	bl	80011c0 <_fflush_r>
 8001272:	b938      	cbnz	r0, 8001284 <__swbuf_r+0x74>
 8001274:	4638      	mov	r0, r7
 8001276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001278:	4621      	mov	r1, r4
 800127a:	4628      	mov	r0, r5
 800127c:	f000 f806 	bl	800128c <__swsetup_r>
 8001280:	2800      	cmp	r0, #0
 8001282:	d0d5      	beq.n	8001230 <__swbuf_r+0x20>
 8001284:	f04f 37ff 	mov.w	r7, #4294967295
 8001288:	e7f4      	b.n	8001274 <__swbuf_r+0x64>
	...

0800128c <__swsetup_r>:
 800128c:	b538      	push	{r3, r4, r5, lr}
 800128e:	4b2a      	ldr	r3, [pc, #168]	; (8001338 <__swsetup_r+0xac>)
 8001290:	4605      	mov	r5, r0
 8001292:	6818      	ldr	r0, [r3, #0]
 8001294:	460c      	mov	r4, r1
 8001296:	b118      	cbz	r0, 80012a0 <__swsetup_r+0x14>
 8001298:	6a03      	ldr	r3, [r0, #32]
 800129a:	b90b      	cbnz	r3, 80012a0 <__swsetup_r+0x14>
 800129c:	f7ff fa36 	bl	800070c <__sinit>
 80012a0:	89a3      	ldrh	r3, [r4, #12]
 80012a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012a6:	0718      	lsls	r0, r3, #28
 80012a8:	d422      	bmi.n	80012f0 <__swsetup_r+0x64>
 80012aa:	06d9      	lsls	r1, r3, #27
 80012ac:	d407      	bmi.n	80012be <__swsetup_r+0x32>
 80012ae:	2309      	movs	r3, #9
 80012b0:	602b      	str	r3, [r5, #0]
 80012b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80012b6:	81a3      	strh	r3, [r4, #12]
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	e034      	b.n	8001328 <__swsetup_r+0x9c>
 80012be:	0758      	lsls	r0, r3, #29
 80012c0:	d512      	bpl.n	80012e8 <__swsetup_r+0x5c>
 80012c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012c4:	b141      	cbz	r1, 80012d8 <__swsetup_r+0x4c>
 80012c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012ca:	4299      	cmp	r1, r3
 80012cc:	d002      	beq.n	80012d4 <__swsetup_r+0x48>
 80012ce:	4628      	mov	r0, r5
 80012d0:	f7ff fb24 	bl	800091c <_free_r>
 80012d4:	2300      	movs	r3, #0
 80012d6:	6363      	str	r3, [r4, #52]	; 0x34
 80012d8:	89a3      	ldrh	r3, [r4, #12]
 80012da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80012de:	81a3      	strh	r3, [r4, #12]
 80012e0:	2300      	movs	r3, #0
 80012e2:	6063      	str	r3, [r4, #4]
 80012e4:	6923      	ldr	r3, [r4, #16]
 80012e6:	6023      	str	r3, [r4, #0]
 80012e8:	89a3      	ldrh	r3, [r4, #12]
 80012ea:	f043 0308 	orr.w	r3, r3, #8
 80012ee:	81a3      	strh	r3, [r4, #12]
 80012f0:	6923      	ldr	r3, [r4, #16]
 80012f2:	b94b      	cbnz	r3, 8001308 <__swsetup_r+0x7c>
 80012f4:	89a3      	ldrh	r3, [r4, #12]
 80012f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80012fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012fe:	d003      	beq.n	8001308 <__swsetup_r+0x7c>
 8001300:	4621      	mov	r1, r4
 8001302:	4628      	mov	r0, r5
 8001304:	f000 f850 	bl	80013a8 <__smakebuf_r>
 8001308:	89a0      	ldrh	r0, [r4, #12]
 800130a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800130e:	f010 0301 	ands.w	r3, r0, #1
 8001312:	d00a      	beq.n	800132a <__swsetup_r+0x9e>
 8001314:	2300      	movs	r3, #0
 8001316:	60a3      	str	r3, [r4, #8]
 8001318:	6963      	ldr	r3, [r4, #20]
 800131a:	425b      	negs	r3, r3
 800131c:	61a3      	str	r3, [r4, #24]
 800131e:	6923      	ldr	r3, [r4, #16]
 8001320:	b943      	cbnz	r3, 8001334 <__swsetup_r+0xa8>
 8001322:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001326:	d1c4      	bne.n	80012b2 <__swsetup_r+0x26>
 8001328:	bd38      	pop	{r3, r4, r5, pc}
 800132a:	0781      	lsls	r1, r0, #30
 800132c:	bf58      	it	pl
 800132e:	6963      	ldrpl	r3, [r4, #20]
 8001330:	60a3      	str	r3, [r4, #8]
 8001332:	e7f4      	b.n	800131e <__swsetup_r+0x92>
 8001334:	2000      	movs	r0, #0
 8001336:	e7f7      	b.n	8001328 <__swsetup_r+0x9c>
 8001338:	20000058 	.word	0x20000058

0800133c <_sbrk_r>:
 800133c:	b538      	push	{r3, r4, r5, lr}
 800133e:	4d06      	ldr	r5, [pc, #24]	; (8001358 <_sbrk_r+0x1c>)
 8001340:	2300      	movs	r3, #0
 8001342:	4604      	mov	r4, r0
 8001344:	4608      	mov	r0, r1
 8001346:	602b      	str	r3, [r5, #0]
 8001348:	f7ff f8f4 	bl	8000534 <_sbrk>
 800134c:	1c43      	adds	r3, r0, #1
 800134e:	d102      	bne.n	8001356 <_sbrk_r+0x1a>
 8001350:	682b      	ldr	r3, [r5, #0]
 8001352:	b103      	cbz	r3, 8001356 <_sbrk_r+0x1a>
 8001354:	6023      	str	r3, [r4, #0]
 8001356:	bd38      	pop	{r3, r4, r5, pc}
 8001358:	200001b8 	.word	0x200001b8

0800135c <__swhatbuf_r>:
 800135c:	b570      	push	{r4, r5, r6, lr}
 800135e:	460c      	mov	r4, r1
 8001360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001364:	2900      	cmp	r1, #0
 8001366:	b096      	sub	sp, #88	; 0x58
 8001368:	4615      	mov	r5, r2
 800136a:	461e      	mov	r6, r3
 800136c:	da0d      	bge.n	800138a <__swhatbuf_r+0x2e>
 800136e:	89a3      	ldrh	r3, [r4, #12]
 8001370:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001374:	f04f 0100 	mov.w	r1, #0
 8001378:	bf0c      	ite	eq
 800137a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800137e:	2340      	movne	r3, #64	; 0x40
 8001380:	2000      	movs	r0, #0
 8001382:	6031      	str	r1, [r6, #0]
 8001384:	602b      	str	r3, [r5, #0]
 8001386:	b016      	add	sp, #88	; 0x58
 8001388:	bd70      	pop	{r4, r5, r6, pc}
 800138a:	466a      	mov	r2, sp
 800138c:	f000 f848 	bl	8001420 <_fstat_r>
 8001390:	2800      	cmp	r0, #0
 8001392:	dbec      	blt.n	800136e <__swhatbuf_r+0x12>
 8001394:	9901      	ldr	r1, [sp, #4]
 8001396:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800139a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800139e:	4259      	negs	r1, r3
 80013a0:	4159      	adcs	r1, r3
 80013a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a6:	e7eb      	b.n	8001380 <__swhatbuf_r+0x24>

080013a8 <__smakebuf_r>:
 80013a8:	898b      	ldrh	r3, [r1, #12]
 80013aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80013ac:	079d      	lsls	r5, r3, #30
 80013ae:	4606      	mov	r6, r0
 80013b0:	460c      	mov	r4, r1
 80013b2:	d507      	bpl.n	80013c4 <__smakebuf_r+0x1c>
 80013b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80013b8:	6023      	str	r3, [r4, #0]
 80013ba:	6123      	str	r3, [r4, #16]
 80013bc:	2301      	movs	r3, #1
 80013be:	6163      	str	r3, [r4, #20]
 80013c0:	b002      	add	sp, #8
 80013c2:	bd70      	pop	{r4, r5, r6, pc}
 80013c4:	ab01      	add	r3, sp, #4
 80013c6:	466a      	mov	r2, sp
 80013c8:	f7ff ffc8 	bl	800135c <__swhatbuf_r>
 80013cc:	9900      	ldr	r1, [sp, #0]
 80013ce:	4605      	mov	r5, r0
 80013d0:	4630      	mov	r0, r6
 80013d2:	f7ff fb0f 	bl	80009f4 <_malloc_r>
 80013d6:	b948      	cbnz	r0, 80013ec <__smakebuf_r+0x44>
 80013d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013dc:	059a      	lsls	r2, r3, #22
 80013de:	d4ef      	bmi.n	80013c0 <__smakebuf_r+0x18>
 80013e0:	f023 0303 	bic.w	r3, r3, #3
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	81a3      	strh	r3, [r4, #12]
 80013ea:	e7e3      	b.n	80013b4 <__smakebuf_r+0xc>
 80013ec:	89a3      	ldrh	r3, [r4, #12]
 80013ee:	6020      	str	r0, [r4, #0]
 80013f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f4:	81a3      	strh	r3, [r4, #12]
 80013f6:	9b00      	ldr	r3, [sp, #0]
 80013f8:	6163      	str	r3, [r4, #20]
 80013fa:	9b01      	ldr	r3, [sp, #4]
 80013fc:	6120      	str	r0, [r4, #16]
 80013fe:	b15b      	cbz	r3, 8001418 <__smakebuf_r+0x70>
 8001400:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001404:	4630      	mov	r0, r6
 8001406:	f000 f81d 	bl	8001444 <_isatty_r>
 800140a:	b128      	cbz	r0, 8001418 <__smakebuf_r+0x70>
 800140c:	89a3      	ldrh	r3, [r4, #12]
 800140e:	f023 0303 	bic.w	r3, r3, #3
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	81a3      	strh	r3, [r4, #12]
 8001418:	89a3      	ldrh	r3, [r4, #12]
 800141a:	431d      	orrs	r5, r3
 800141c:	81a5      	strh	r5, [r4, #12]
 800141e:	e7cf      	b.n	80013c0 <__smakebuf_r+0x18>

08001420 <_fstat_r>:
 8001420:	b538      	push	{r3, r4, r5, lr}
 8001422:	4d07      	ldr	r5, [pc, #28]	; (8001440 <_fstat_r+0x20>)
 8001424:	2300      	movs	r3, #0
 8001426:	4604      	mov	r4, r0
 8001428:	4608      	mov	r0, r1
 800142a:	4611      	mov	r1, r2
 800142c:	602b      	str	r3, [r5, #0]
 800142e:	f7ff f858 	bl	80004e2 <_fstat>
 8001432:	1c43      	adds	r3, r0, #1
 8001434:	d102      	bne.n	800143c <_fstat_r+0x1c>
 8001436:	682b      	ldr	r3, [r5, #0]
 8001438:	b103      	cbz	r3, 800143c <_fstat_r+0x1c>
 800143a:	6023      	str	r3, [r4, #0]
 800143c:	bd38      	pop	{r3, r4, r5, pc}
 800143e:	bf00      	nop
 8001440:	200001b8 	.word	0x200001b8

08001444 <_isatty_r>:
 8001444:	b538      	push	{r3, r4, r5, lr}
 8001446:	4d06      	ldr	r5, [pc, #24]	; (8001460 <_isatty_r+0x1c>)
 8001448:	2300      	movs	r3, #0
 800144a:	4604      	mov	r4, r0
 800144c:	4608      	mov	r0, r1
 800144e:	602b      	str	r3, [r5, #0]
 8001450:	f7ff f857 	bl	8000502 <_isatty>
 8001454:	1c43      	adds	r3, r0, #1
 8001456:	d102      	bne.n	800145e <_isatty_r+0x1a>
 8001458:	682b      	ldr	r3, [r5, #0]
 800145a:	b103      	cbz	r3, 800145e <_isatty_r+0x1a>
 800145c:	6023      	str	r3, [r4, #0]
 800145e:	bd38      	pop	{r3, r4, r5, pc}
 8001460:	200001b8 	.word	0x200001b8

08001464 <_init>:
 8001464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001466:	bf00      	nop
 8001468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800146a:	bc08      	pop	{r3}
 800146c:	469e      	mov	lr, r3
 800146e:	4770      	bx	lr

08001470 <_fini>:
 8001470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001472:	bf00      	nop
 8001474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001476:	bc08      	pop	{r3}
 8001478:	469e      	mov	lr, r3
 800147a:	4770      	bx	lr
